@model Icon.Dashboard.Mvc.ViewModels.IconApplicationViewModel

@{
    var action = ViewContext.RouteData.Values["action"].ToString();
    var controller = ViewContext.RouteData.Values["controller"].ToString();
    bool isCreate = action == "Create";
}

<div class="row">
    <hr />
    @using (Html.BeginForm(action, controller, new { application = Model.Name, server = Model.Server }, FormMethod.Post, null))
    {
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group col-xs-12 col-sm-6 col-lg-4">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @if (isCreate)
                {
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                }
                else
                {
                    @Html.DisplayFor(model => model.Name)
                    @Html.HiddenFor(model => model.Name)
                }
            </div>
        </div>

        <div class="form-group col-xs-12 col-sm-6 col-lg-4">
            @Html.LabelFor(model => model.Server, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @if (isCreate)
                {
                    @Html.EditorFor(model => model.Server, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Server, "", new { @class = "text-danger" })
                }
                else
                {
                    @Html.DisplayFor(model => model.Server)
                    @Html.HiddenFor(model => model.Server)
                }
            </div>
        </div>

        <div class="form-group col-xs-12 col-sm-6 col-lg-4">
            @Html.LabelFor(model => model.TypeOfApplication, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @Html.DropDownList(
                       "TypeOfApplication",
                       EnumHelper.GetSelectList(typeof(Icon.Dashboard.DataFileAccess.Models.ApplicationTypeEnum)),
                       "choose application type",
                       new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeOfApplication, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-xs-12 col-sm-6 col-lg-4">
            @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-xs-12 col-sm-6 col-lg-4">
            @Html.LabelFor(model => model.ConfigFilePath, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @Html.TextAreaFor(model => model.ConfigFilePath, 4, 0, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ConfigFilePath, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-xs-12 col-sm-6 col-lg-4">
            @Html.LabelFor(model => model.DataFlowFrom, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @Html.EditorFor(model => model.DataFlowFrom, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataFlowFrom, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-xs-12 col-sm-6 col-lg-4">
            @Html.LabelFor(model => model.DataFlowTo, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @Html.EditorFor(model => model.DataFlowTo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataFlowTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-xs-12 col-sm-6 col-lg-4">
            @Html.LabelFor(model => model.LoggingName, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @Html.EditorFor(model => model.LoggingName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LoggingName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-xs-12 col-sm-6 col-lg-4">
            @Html.LabelFor(model => model.LoggingID, htmlAttributes: new { @class = "control-label col-xs-3" })
            <div class="col-xs-9">
                @Html.EditorFor(model => model.LoggingID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LoggingID, "", new { @class = "text-danger" })
            </div>
        </div>

        if (!String.IsNullOrWhiteSpace(Model.CurrentEsbEnvironment))
        {
            <div class="form-group col-xs-12 col-sm-6 col-lg-12">
                @Html.LabelFor(model => model.CurrentEsbEnvironment, htmlAttributes: new { @class = "control-label col-xs-3" })
                <div class="col-xs-9">
                    @Html.DisplayFor(model => model.CurrentEsbEnvironment)
                </div>
            </div>
        }
        <div class="col-xs-offset-2 col-xs-8">
            <button type="submit" value="@(isCreate ? "Create" : "Save")" class="btn btn-warning btn-block margin-top-10">@(isCreate ? "Create" : "Save")</button>
        </div>
    }
</div>

<div class="row">
    <div class="col-xs-offset-2 col-xs-8">
        @using (Html.BeginForm("Delete", controller, new { application = Model.Name, server = Model.Server }, FormMethod.Post, null))
        {
            <button type="submit" value="@("Delete")" class="btn btn-danger btn-block margin-top-10">@("Delete")</button>
        }
    </div>
    <div class="col-xs-offset-2 col-xs-8">
        @Html.ActionLink("Edit Configuration", "Configure", "Home", new { application = Model.Name, server = Model.Server }, new { @class = "btn btn-default btn-block margin-top-10" })
    </div>
</div>