@model Icon.Dashboard.Mvc.ViewModels.EsbEnvironmentViewModel

@Html.ValidationSummary(true, "", new { @class = "text-danger" })


<div class="form-group col-xs-12">
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h4 class="panel-title text-center">
                <a data-toggle="collapse" href="#collapsibleEsbEnvironment@(Model.Name)">
                    @(ViewBag.Title ?? $"{Model.Name} ESB Environment Details")
                </a>
            </h4>
        </div>
        <div id="collapsibleEsbEnvironment@(Model.Name)" class="panel-collapse collapse in">
            <div class="panel-body">

                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.ServerUrl, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.ServerUrl, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ServerUrl, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.TargetHostName, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.TargetHostName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TargetHostName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.JmsUsername, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.JmsUsername, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.JmsUsername, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.JmsPassword, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.JmsPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.JmsPassword, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.JndiUsername, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.JndiUsername, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.JndiUsername, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.JndiPassword, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.JndiPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.JndiPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.ConnectionFactoryName, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.ConnectionFactoryName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ConnectionFactoryName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.SslPassword, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.SslPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SslPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.QueueName, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.QueueName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.QueueName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.SessionMode, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.SessionMode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SessionMode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.CertificateName, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CertificateName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CertificateName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.CertificateStoreName, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CertificateStoreName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CertificateStoreName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.CertificateStoreLocation, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.CertificateStoreLocation, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CertificateStoreLocation, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.ReconnectDelay, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.ReconnectDelay, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ReconnectDelay, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                    @Html.LabelFor(model => model.NumberOfListenerThreads, htmlAttributes: new { @class = "control-label col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.NumberOfListenerThreads, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NumberOfListenerThreads, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-xs-12">
                    <div class="panel panel-info">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#collapsibleApplications@(Model.Name)">
                                    @Html.DisplayNameFor(model => model.Applications) Configured for @(Model.Name)
                                </a>
                            </h4>
                        </div>
                        <div id="collapsibleApplications@(Model.Name)" class="panel-collapse collapse">
                            <div id="applicationsPanelBody" class="panel-body">
                                @Html.ValidationMessageFor(model => model.Applications, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.Applications, new { htmlAttributes = new { @class = "form-control" } })

                                <div id="rowForAddApplicationButton" class="row">
                                    <div class="col-xs-offset-1 col-xs-10">
                                        <button type="button" class="btn btn-sm btn-block btn-success" onclick="addRow(this)">
                                            @*<span class="glyphicon glyphicon-plus"></span>*@
                                            Add Application
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>