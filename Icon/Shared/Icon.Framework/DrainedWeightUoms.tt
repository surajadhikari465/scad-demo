<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="ConfigurationAccessor.ttinclude" #>
<#
    string tableName = "dbo.Trait";
    string path = Path.GetDirectoryName(Host.TemplateFile);
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace Icon.Framework
{
    /// <summary>
    /// <#= tableName #> auto generated Ids
    /// </summary>

    [GeneratedCode("TextTemplatingFileGenerator", "10")]
    public static class DrainedWeightUoms
    {
<#
	var values = new List<string>();

    string fullPath = Host.ResolvePath("") + @"App.config";
	var config = new ConfigurationAccessor((IServiceProvider)this.Host, fullPath);
    string connectionString = config.ConnectionStrings["T4"].ConnectionString;

    SqlConnection conn = new SqlConnection(connectionString);
    string command = string.Format("select traitPattern from Trait where traitDesc = 'Drained Weight UOM'");
    SqlCommand comm = new SqlCommand(command, conn);

    conn.Open();

    SqlDataReader reader = comm.ExecuteReader();
    bool loop = reader.Read();

	values.AddRange(reader["traitPattern"].ToString().Split('|'));

	for(int i = 0; i < values.Count;i++)
    {
#>
        public const string <#= Pascalize(values[i]) #> = "<#= values[i] #>";
<#
    }
#>
	
		private static string[] descriptions = new string[]
				{
<#
	for(int i = 0; i < values.Count;i++)
    {
#>
					"<#= values[i] #>"<#= i < values.Count - 1 ? "," : "" #>
<#
    }
#>
				};
		public static string[] AsArray { get { return descriptions; } }
	
		
		public static IEnumerable<string> Values
		{
			get
			{
				return new List<string>
				{
<#
	for(int i = 0; i < values.Count;i++)
    {
#>
					{ "<#= values[i] #>" }<#= i < values.Count - 1 ? "," : "" #>
<#
	}
#>				};
			}
		}
	}
}
<#+
    private string Pascalize(object value)
    {
        Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
        return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
    }
#>