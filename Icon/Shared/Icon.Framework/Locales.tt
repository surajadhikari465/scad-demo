<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="ConfigurationAccessor.ttinclude" #>
<#
    string tableName = "dbo.Locale";
    string path = Path.GetDirectoryName(Host.TemplateFile);
    string columnName = "localeName";
	string id = "localeID";
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace Icon.Framework
{
    /// <summary>
    /// <#= tableName #> auto generated Ids
    /// </summary>

    [GeneratedCode("TextTemplatingFileGenerator", "10")]
    public static class Locales
    {
<#
    string fullPath = Host.ResolvePath("") + @"App.config";
	var config = new ConfigurationAccessor((IServiceProvider)this.Host, fullPath);
    string connectionString = config.ConnectionStrings["T4"].ConnectionString;
    SqlConnection conn = new SqlConnection(connectionString);
    string command = string.Format("select {0}, {1} from {2} where {0} = 'Whole Foods' or {0} = '365' order by {3}", columnName, id, tableName, id);
    SqlCommand comm = new SqlCommand(command, conn);

    conn.Open();

    SqlDataReader reader = comm.ExecuteReader();
    bool loop = reader.Read();

	List<string> names = new List<string>();
	List<int> ids = new List<int>();

    while(loop)
    {
		names.Add(reader[columnName].ToString());
		ids.Add(int.Parse(reader[id].ToString()));
		loop = reader.Read();
	}

	for(int i = 0; i < ids.Count; i++)
	{
#>
        public const int <#= Pascalize(names[i], true) #> = <#= ids[i] #>;
<#
    }
#>
		
		public static class Names
		{
<#
	for(int i = 0; i < ids.Count; i++)
	{
#>
			public const string <#= Pascalize(names[i], true) #> = "<#= names[i] #>";
<#
    }
#>		
			private static List<string> names = new List<string>
			{
<#
	for(int i = 0; i < ids.Count; i++)
	{
#>
				"<#= names[i] #>"<#= i == ids.Count - 1 ? "" : "," #>
<#
    }
#>
			};
			public static List<string> List { get { return names; } }
		}
	}
}
<#+
    private string Pascalize(object value, bool threeSixtyFive = false)
    {
		if(threeSixtyFive && value.ToString() == "365")
		{
			return "ThreeSixtyFive";
		}
        Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
        return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
    }
#>
