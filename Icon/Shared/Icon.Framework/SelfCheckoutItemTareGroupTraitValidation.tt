<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="ConfigurationAccessor.ttinclude" #>
<#
    string tableName = "dbo.Trait";
    string path = Path.GetDirectoryName(Host.TemplateFile);
	string traitName = "SelfCheckoutItemTareGroup";
	string traitCode = "ITG";
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace Icon.Framework
{
    /// <summary>
    /// Auto-generated validation class for the <#= traitName #> Trait (<#= traitCode #>)
	/// (reads regular expression patterns from the <#= tableName #> table)
    /// </summary>
    [GeneratedCode("TextTemplatingFileGenerator", "10")]
    public static class <#= traitName #>TraitValidation
    {
<#
	var values = new List<string>();

    string fullPath = Host.ResolvePath("") + @"App.config";
	var config = new ConfigurationAccessor((IServiceProvider)this.Host, fullPath);
    string connectionString = config.ConnectionStrings["T4"].ConnectionString;

    SqlConnection conn = new SqlConnection(connectionString);
    string command = string.Format("select traitPattern from {0} where traitCode = '{1}'", tableName, traitCode);
    SqlCommand comm = new SqlCommand(command, conn);

    conn.Open();

    SqlDataReader reader = comm.ExecuteReader();
    bool loop = reader.Read();

	values.AddRange(reader["traitPattern"].ToString().Split('|'));

	for(int i = 0; i < values.Count;i++)
    {
#>
        public const string ValidRegExPattern<#= i+1 #> = @"<#= values[i] #>";
<#
    }
#>
	}
}