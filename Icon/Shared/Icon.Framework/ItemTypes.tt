<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="ConfigurationAccessor.ttinclude" #>
<#
    string tableName = "dbo.ItemType";
    string path = Path.GetDirectoryName(Host.TemplateFile);
    string codeColumn = "itemTypeCode";
	string descriptionColumn = "itemTypeDesc";
	string idColumn = "itemTypeID";
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace Icon.Framework
{
    /// <summary>
    /// <#= tableName #> auto generated Ids
    /// </summary>

    [GeneratedCode("TextTemplatingFileGenerator", "10")]
    public static class ItemTypes
    {
<#
	var codes = new List<string>();
	var ids = new List<int>();
	var descriptions = new List<string>();

    string fullPath = Host.ResolvePath(@"..\Icon.Framework\App.config");
	var config = new ConfigurationAccessor((IServiceProvider)this.Host, fullPath);
    string connectionString = config.ConnectionStrings["T4"].ConnectionString;
    SqlConnection conn = new SqlConnection(connectionString);
    string command = string.Format("select {0}, {1}, {2} from {3} order by {1}", codeColumn, idColumn, descriptionColumn, tableName);
    SqlCommand comm = new SqlCommand(command, conn);

    conn.Open();

    SqlDataReader reader = comm.ExecuteReader();
    bool loop = reader.Read();

    while(loop)
	{	
		codes.Add(reader[codeColumn].ToString());
		ids.Add(int.Parse(reader[idColumn].ToString()));
		descriptions.Add(reader[descriptionColumn].ToString());

		loop = reader.Read();
	}

	for(int i = 0; i < codes.Count;i++)
    {
#>
        public const int <#= Pascalize(descriptions[i]) #> = <#= ids[i] #>;
<#
    }
#>
		
		private static Dictionary<string, int> codeToIdDictionary = new Dictionary<string, int>
			{
<#
	for(int i = 0; i < ids.Count;i++)
    {
#>
				{ "<#= codes[i] #>", <#= ids[i] #> }<#= i < ids.Count - 1 ? "," : "" #>
<#
	}
#>			};
		public static Dictionary<string, int> Ids { get { return codeToIdDictionary; } }

		public static class Codes
		{
<#
	for(int i = 0; i < codes.Count;i++)
    {
#>
			public const string <#= Pascalize(descriptions[i]) #> = "<#= codes[i] #>";
<#
    }
#>

			private static string[] codes = new string[]
				{
<#
	for(int i = 0; i < codes.Count;i++)
    {
#>
					"<#= codes[i] #>"<#= i < codes.Count - 1 ? "," : "" #>
<#
    }
#>
				};
			public static string[] AsArray { get { return codes; } }
		
		
			private static Dictionary<int, string> idToCodesDictionary = new Dictionary<int, string>
			{
<#
	for(int i = 0; i < codes.Count;i++)
    {
#>
				{ <#= ids[i] #>, "<#= codes[i] #>" }<#= i < codes.Count - 1 ? "," : "" #>
<#
	}
#>			};
			public static Dictionary<int, string> AsDictionary { get { return idToCodesDictionary; } }
		}

		public static class Descriptions
		{
<#
	for(int i = 0; i < codes.Count;i++)
    {
#>
			public const string <#= Pascalize(descriptions[i]) #> = "<#= descriptions[i] #>";
<#
    }
#>

			private static string[] descriptions = new string[]
				{
<#
	for(int i = 0; i < descriptions.Count;i++)
    {
#>
					"<#= descriptions[i] #>"<#= i < descriptions.Count - 1 ? "," : "" #>
<#
    }
#>
				};
			public static string[] AsArray { get { return descriptions; } }
				
			private static Dictionary<int, string> idToDescriptionsDictionary = new Dictionary<int, string>
			{
<#
	for(int i = 0; i < codes.Count;i++)
    {
#>
				{ <#= ids[i] #>, "<#= descriptions[i] #>" }<#= i < descriptions.Count - 1 ? "," : "" #>
<#
	}
#>			};
			public static Dictionary<int, string> AsDictionary { get { return idToDescriptionsDictionary; } }
		}
	}
}
<#+
    private string Pascalize(object value)
    {
        Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
        return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
    }
#>