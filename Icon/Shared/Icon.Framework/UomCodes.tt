<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="ConfigurationAccessor.ttinclude" #>
<#
    string tableName = "UOM";
    string path = Path.GetDirectoryName(Host.TemplateFile);
    string uomId = "uomID";
    string uomName = "uomName";
	string uomCode = "uomCode";
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace Icon.Framework
{
    /// <summary>
    /// <#= tableName #> auto generated constants
    /// </summary>

    [GeneratedCode("TextTemplatingFileGenerator", "10")]
    public static class UomCodes
    {		
<#
	var uomNames = new List<string>();
	var uomCodes = new List<string>();

    string fullPath = Host.ResolvePath(@"..\Icon.Framework\App.config");
	var config = new ConfigurationAccessor((IServiceProvider)this.Host, fullPath);
    string connectionString = config.ConnectionStrings["T4"].ConnectionString;
    SqlConnection conn = new SqlConnection(connectionString);
    string command = string.Format("select {0}, {1} from {2} order by {3}", uomName, uomCode, tableName, uomId);
    SqlCommand comm = new SqlCommand(command, conn);

    conn.Open();

    SqlDataReader reader = comm.ExecuteReader();
    bool loop = reader.Read();

    while(loop)
	{
		uomNames.Add(reader[uomName].ToString());
		uomCodes.Add(reader[uomCode].ToString());
		loop = reader.Read();
	}

	for(int i = 0;i < uomNames.Count;i++)
    {
#>		public const string <#= Pascalize(uomNames[i]) #> = "<#= uomCodes[i] #>";
<#
	}
#>		
		public static Dictionary<string, string> ByName = new Dictionary<string, string>
			{
<#
	for(int i = 0;i < uomNames.Count;i++)
	{
#>
				{ "<#= uomNames[i] #>", "<#= uomCodes[i] #>" }<#= i < uomNames.Count - 1 ? "," : "" #>
<#
    }
#>			};
	}
}
<#+
    private string Pascalize(object value)
    {
        Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
        return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
    }
#>
