@using Infragistics.Web.Mvc
@using Icon.Framework
@model Icon.Web.Mvc.Models.HierarchyClassViewModel

@{
	ViewBag.Title = String.Format("Edit {0}", Model.HierarchyLevelName);
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@{Html.RenderPartial("_HeaderPartial", "Hierarchy Class Management");}

<div class="page-section">
	@using (Html.BeginForm("Edit", "HierarchyClass", FormMethod.Post, new { @class = "begin-form" }))
	{
		@Html.AntiForgeryToken()
		@Html.ValidationSummary(true)

		@Html.HiddenFor(model => model.HierarchyId)
		@Html.HiddenFor(model => model.HierarchyName)
		@Html.HiddenFor(model => model.HierarchyClassId)
		@Html.HiddenFor(model => model.HierarchyLevel)
		@Html.HiddenFor(model => model.HierarchyParentClassId)
		@Html.HiddenFor(model => model.HierarchyParentClassName)
        @Html.HiddenFor(model => model.HierarchyLevelName)

		<fieldset>
			<legend>@ViewBag.Title</legend>

			<div class="row">
				@Html.LabelFor(model => model.HierarchyName, "Hierarchy", new { @class = "col-md-2 form-label" })
				<div>
					@Html.TextBoxFor(model => model.HierarchyName, new { @readonly = "readonly", @class = "col-md-6 form-input" })
				</div>
			</div>

			@if (!String.IsNullOrEmpty(Model.HierarchyParentClassName))
			{
				<div class="row">
					@Html.LabelFor(model => model.HierarchyParentClassName, new { @class = "col-md-2 form-label" })
					<div>
						@Html.TextBoxFor(model => model.HierarchyParentClassName, new { @readonly = "readonly", @class = "col-md-6 form-input" })
					</div>
				</div>
			}
            
			@* Only allow the editing of a HierarchyClassName for Brand, Browsing, or the leaf node of the Merchandise Hierarchy *@
			@if ((Model.HierarchyName == HierarchyNames.Merchandise && Model.HierarchyLevel == HierarchyLevels.SubBrick) || Model.HierarchyName == HierarchyNames.Brands || Model.HierarchyName == HierarchyNames.Browsing)
			{
				<div class="row">
					@Html.LabelFor(model => model.HierarchyClassName, "Updated Class Name", new { @class = "col-md-2 form-label" })
					<div>
						@Html.TextBoxFor(model => model.HierarchyClassName, new { @class = "col-md-6 form-input" })
						@Html.ValidationMessageFor(model => model.HierarchyClassName, null, new { @class = "col-md-6 form-property-val" })
					</div>
				</div>
			}
			else
			{
				<div class="row">
					@Html.LabelFor(model => model.HierarchyClassName, "Updated Class Name", new { @class = "col-md-2 form-label" })
					<div>
						@Html.TextBoxFor(model => model.HierarchyClassName, new { @readonly = "readonly", @class = "col-md-6 form-input" })
					</div>
				</div>
			}
			@if (Model.HierarchyName == HierarchyNames.Merchandise && Model.HierarchyLevel == HierarchyLevels.SubBrick)
			{
				<div class="row">
					@Html.LabelFor(model => model.SubTeam, new { @class = "col-md-2 form-label" })
					<div>
						@Html.DropDownListFor(model => model.SelectedSubTeam, Model.SubTeamList, new { @class = "col-md-6 form-input" })
					</div>
				</div> 
                <div class="row">
                    @Html.LabelFor(model => model.NonMerchandiseTrait, new { @class = "col-md-2 form-label" })
                    <div>
                        @Html.DropDownListFor(model => model.SelectedNonMerchandiseTrait, Model.NonMerchandiseTraitList, new { @class = "col-md-6 form-input" })
                    </div>
                </div>
                <div class="row">
                    @Html.LabelFor(model => model.SubBrickCode, new { @class = "col-md-2 form-label" })
                    <div>
                        @Html.TextBoxFor(model => model.SubBrickCode, null, new { @class = "col-md-6 form-input" })
                        @Html.ValidationMessageFor(model => model.SubBrickCode, null, new { @class = "col-md-6 form-property-val" })
                    </div>
                </div>
            }
			@if (Model.HierarchyName == HierarchyNames.Merchandise && Model.HierarchyLevel != HierarchyLevels.SubBrick)
			{
				<div class="row">
					@Html.LabelFor(model => model.GlAccount, new { @class = "col-md-2 form-label"})
					<div>
						@Html.TextBoxFor(model => model.GlAccount, new { @class = "col-md-6 form-input" })
						@Html.ValidationMessageFor(model => model.HierarchyClassName, null, new { @class = "col-md-6 form-property-val" })
					</div>
				</div>
			}
            @if (Model.HierarchyName == HierarchyNames.Merchandise && Model.HierarchyLevel == HierarchyLevels.Gs1Brick)
            {
                <div class="row">
                    @Html.LabelFor(model => model.ProhibitDiscount, new { @class = "col-md-2 form-label" })
                    <div>
                        @Html.CheckBoxFor(model => model.ProhibitDiscount, new { @class = "checkbox" })
                    </div>
                </div>
            }
			@if (Model.HierarchyName == HierarchyNames.Tax)
			{
				<div class="row">
					@Html.LabelFor(model => model.TaxAbbreviation, new { @class = "col-md-2 form-label"})
					<div>
						@Html.TextBoxFor(model => model.TaxAbbreviation, new { @class = "col-md-6 form-input" })
						@Html.ValidationMessageFor(model => model.TaxAbbreviation, null, new { @class = "col-md-6 form-property-val" })
					</div>
				</div>
                <div class="row">
					@Html.LabelFor(model => model.TaxRomance, new { @class = "col-md-2 form-label"})
					<div>
						@Html.TextBoxFor(model => model.TaxRomance, new { @class = "col-md-6 form-input" })
						@Html.ValidationMessageFor(model => model.TaxRomance, null, new { @class = "col-md-6 form-property-val" })
					</div>
				</div>
			}
		</fieldset>
	   
		<div class="col-md-offset-2">
			<input type="submit" id="saveButton" value="Save Changes" class="btn btn-default form-submit" />
		</div>
	}
	
	<div class="validation-section page-subsection">
		@if (ViewData["ErrorMessage"] != null)
		{
			<div class="alert alert-danger alert-dismissable">
				<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
				<strong>@ViewData["ErrorMessage"].ToString()</strong>
			</div>
		}
		else if (ViewData["SuccessMessage"] != null)
		{
			<div class="alert alert-success alert-dismissable">
				<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
				<strong>@ViewData["SuccessMessage"]</strong>
			</div>
		}
		else if (TempData["ErrorMessage"] != null)
		{
			<div class="alert alert-danger alert-dismissable">
				<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
				<strong>@TempData["ErrorMessage"].ToString()</strong>
			</div>
		}
		else if (TempData["SuccessMessage"] != null)
		{
			<div class="alert alert-success alert-dismissable">
				<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
				<strong>@TempData["SuccessMessage"]</strong>
			</div>
		}
	</div>

</div>

<div class="form-footer">
	@Html.ActionLink("Back to Hierarchy Search", "Index", "Hierarchy", new { SelectedHierarchyId = Model.HierarchyId }, null)
</div>

@section scripts
{
    @Scripts.Render("~/Scripts/jquery-disable.js")
    @Scripts.Render("~/Scripts/HierarchyClass/hierarchy-class-edit.js")
}