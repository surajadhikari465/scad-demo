@model Icon.Web.Mvc.Models.ContactViewModel

@{
    ViewBag.Title = "Manage Contact";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{Html.RenderPartial("_HeaderPartial", "Contact Management");}

    <div class="page-section">
        <div id="divLinks">
            @if (ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
            {
                <span style="margin-right: 10px">@Html.ActionLink("Back to Contacts", "Contact", "Contact", new { hierarchyClassId = Model.HierarchyClassId }, null) &nbsp&nbsp&nbsp&nbsp&nbsp  @Html.ActionLink("Add New Contact", "Manage", "Contact", new { hierarchyClassId = Model.HierarchyClassId, contactId = 0 }, null)</span>
            }
            else
            {
                @Html.ActionLink("Back to Contacts", "Contact", "Contact", new { hierarchyClassId = Model.HierarchyClassId }, null)
            }
        </div>

        @using (Html.BeginForm("Manage", "Contact", FormMethod.Post, new { @class = "begin-form" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            @Html.HiddenFor(model => model.ContactId)
            @Html.HiddenFor(model => model.HierarchyClassId)
            @Html.HiddenFor(model => model.HierarchyName);
            @Html.HiddenFor(model => model.HierarchyClassName);

            <br />
            <h4>@(Model.ContactId > 0 ? "Edit Contact" : "New Contact")</h4>
            <br />
            <span style="font-size:large; color:gray">@Model.HierarchyName :&nbsp&nbsp&nbsp <span style="font-weight:bolder; color:darkgray">@Model.HierarchyClassName</span></span>
            <br />
            <br />

            <div id="fieldset">
                <div class="form-group">
                    @Html.LabelFor(model => model.ContactTypeId, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.ContactTypeId, new SelectList(Model.ContactTypes.Select(x => new { value = x.ContactTypeId, text = x.ContactTypeName }), "value", "text"), "", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ContactTypeId, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ContactName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.ContactName, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 255 }}
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" }})
                    @Html.ValidationMessageFor(model => model.ContactName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Email, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 255}}
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" }})
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Title, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 255}}
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AddressLine1, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.AddressLine1, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 255} }
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AddressLine2, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.AddressLine2, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 255} }
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.City, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 255} }
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.State, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 255} }
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.ZipCode, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 15 } }
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Country, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 255} }
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNumber1, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.PhoneNumber1, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 30 } }
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.PhoneNumber1, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNumber2, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.PhoneNumber2, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", maxlength = 30} }
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.PhoneNumber2, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.WebsiteURL, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.WebsiteURL, (Model != null && ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
                        ? (object)new { htmlAttributes = new { @class = "form-control", } }
                        : new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.WebsiteURL, "", new { @class = "text-danger" })
                </div>
            </div>

            if(ViewBag.UserWriteAccess == Icon.Web.Common.Enums.WriteAccess.Full)
            {
                <div class="form-group" style="height:125px">
                    <input type="submit" value="Save" id="btnSubmit" class="btn btn-light form-submit" hidden="hidden" />
                </div>
            }

            if(ViewData["SuccessMessage"] != null || ViewData["ErrorMessage"] != null)
            {
                <div id="msgBlock" class="block">
                    <div id="msgDialog" style="min-height:10px; max-height:350px; max-width:450px; width:450px; position:absolute; left:50%; top:50%; transform: translate(-50%, -50%); background-color:whitesmoke; border:1px solid black">
                        @{string bgrColor = (@ViewData["ErrorMessage"] != null ? "lightcoral" : "lightgreen");}
                        @{var message = (@ViewData["ErrorMessage"] != null ? @ViewData["ErrorMessage"] : @ViewData["SuccessMessage"]);}

                        <div style="display:flex; align-items:center; height:25px; max-height:25px; background-color:@bgrColor;">
                            <label style="padding-left:5px; width:inherit; font-weight:bolder;">Contact Info</label>
                        </div>

                        <div style="min-height:50px; max-height:190px; padding:5px 0px 5px 5px; overflow-y:auto; overflow-x:hidden; margin:auto;">
                            @message
                        </div>

                        <div class="row justify-content-md-center" style="display:flex; min-height:35px; max-height:35px; padding:5px;">
                            @if (ViewData["SuccessMessage"] != null)
                            {
                                <div class="col-md-4">
                                    @Html.ActionLink("Back to Contacts", "Contact", "Contact", new { hierarchyClassId = Model.HierarchyClassId }, null)
                                </div>

                                <div class="col-md-4">
                                    @Html.ActionLink("Add New Contact", "Manage", "Contact", new { hierarchyClassId = Model.HierarchyClassId, contactId = 0 }, null)
                                </div>
                            }
                            else
                            {
                                <div class="col-md-4">
                                    @*<input type="button" id="btnClose" value="Close" style="height:25px; align-content:center; margin-left:10px;" onclick="closeDialog()" />*@
                                    <button type="button" class="btn btn-link" onclick="closeDialog()">Close</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>

<div id="divBlock" class="block" style="display: none;">
    <div class="block-message">
        <img src="\Content\Infragistics\css\structure\images\igLoadingSmall.gif" style="max-width: 35px; max-height: 35px; margin: 25px 0 0 10px;" />
        <label class="block-label">Please wait... <br /> &nbsp Processing request...</label> 
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/Scripts/Contact/contact.js")
}