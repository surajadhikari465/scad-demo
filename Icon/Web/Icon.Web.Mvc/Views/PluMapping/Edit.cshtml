@model Icon.Web.Mvc.Models.PluMappingViewModel

@{
    ViewBag.Title = "Edit PLU Mapping";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{Html.RenderPartial("_HeaderPartial", "Edit PLU Mapping");}

<div class="page-section">
    @using (Html.BeginForm("Edit", "PluMapping", FormMethod.Post, new { @class = "begin-form" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        @Html.HiddenFor(model => model.ItemId)
        @Html.HiddenFor(model => model.PluType)
        @Html.HiddenFor(model => model.NationalPlu)
        @Html.HiddenFor(model => model.Brand)
        @Html.HiddenFor(model => model.PluDescription)

        <fieldset>
            <legend>Mapping Details</legend>

            <div class="form-group">
                @Html.LabelFor(model => model.NationalPlu, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.NationalPlu, new { @disabled = "disabled", @class = "form-control form-input" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Brand, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.Brand, new { @disabled = "disabled", @class = "form-control form-input" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PluDescription, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.PluDescription, new { @disabled = "disabled", @class = "form-control form-input" })
            </div>

            <div class="page-subsection">
                <div class="form-group">
                    @Html.LabelFor(model => model.flPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.flPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.flPLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.maPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.maPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.maPLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.mwPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.mwPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.mwPLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.naPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.naPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.naPLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ncPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.ncPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.ncPLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.nePLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.nePLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.nePLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.pnPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.pnPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.pnPLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.rmPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.rmPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.rmPLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.soPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.soPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.soPLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.spPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.spPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.spPLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.swPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.swPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.swPLU, null, new { @class = "form-property-val" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ukPLU, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.ukPLU, new { @class = "form-control form-input" })
                    @Html.ValidationMessageFor(model => model.ukPLU, null, new { @class = "form-property-val" })
                </div>
            </div>
        </fieldset>

        <div class="form-group">
            <div class="col-md-offset-2">
                <input type="submit" value="Save" id="saveButton" class="btn btn-light form-submit" onclick="saveButtonClick()" />
            </div>
        </div>

        <div class="page-subsection">
            @if (ViewData["UpdateSuccess"] != null)
            {
                <div class="alert alert-success alert-dismissable">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                    <strong>@ViewData["UpdateSuccess"].ToString()</strong>
                </div>
            }

            @if (ViewData["UpdateFailed"] != null)
            {
                <div class="alert alert-danger alert-dismissable">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                    <strong>@ViewData["UpdateFailed"].ToString()</strong>
                </div>
            }
        </div>
    }
</div>

<div class="page-subsection">
    @Html.ActionLink("Back to Search", "Index")
</div>

@section scripts
{
    @Scripts.Render("~/Scripts/plu-edit.js")
}
