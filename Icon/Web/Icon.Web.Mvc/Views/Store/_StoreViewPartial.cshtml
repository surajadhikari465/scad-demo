@using Infragistics.Web.Mvc
@using IconResources = Icon.Web.Mvc.Resources
@model Icon.Web.Mvc.Models.LocaleGridViewModel

@(Html.Infragistics().Loader()
    .ScriptPath(Url.Content("~/Scripts/Infragistics/js/"))
    .CssPath(Url.Content("~/Content/Infragistics/css/"))
    .Resources("igCombo")
    .Render()
)

<div id="searchResults" class="page-subsection">
    @if (Model.ChainLocale.Locales.Count() > 0)
    {
        @(Html.Infragistics().Grid(Model.ChainLocale.Locales.AsQueryable())
            .ID("storeGrid")                     
            .LoadOnDemand(false)
            .AutoGenerateColumns(false)
            .AutoGenerateLayouts(false)
            .Width("100%")
            .InitialExpandDepth(0)
            .Columns(column =>
            {
                column.For(x => x.LocaleName).HeaderText("Organization").Width("50%");
                column.For(x => x.OpenDate).HeaderText("Open Date").Width("30%");
                column.For(x => x.LocaleId).Hidden(true);
                column.For(x => x.ParentLocaleId).Hidden(true);
            })
            .ColumnLayouts(regionLayouts =>
            {
                regionLayouts.For(x => x.Locales)
                   .PrimaryKey("LocaleId")
                   .ForeignKey("ParentLocaleId")
                   .AutoGenerateColumns(false)
                   .Width("100%")
                   .AutoGenerateLayouts(false)
                   .RenderCheckboxes(true)
                   .Columns(column =>
                   {
                       column.For(x => x.LocaleName).HeaderText("Region").Width("30%");
                       column.For(x => x.RegionAbbreviation).HeaderText("Abbreviation").Width("10%");
                       column.For(x => x.OpenDate).HeaderText("Open Date").DataType("date").Width("20%");
                       column.For(x => x.CloseDate).HeaderText("Close Date").DataType("date").Width("20%");
                       column.For(x => x.LocaleId).Hidden(true);
                       column.For(x => x.ParentLocaleId).Hidden(true);
                       column.For(x => x.OwnerOrgPartyId).Hidden(true);
                       column.For(x => x.LocaleTypeDesc).Hidden(true);
                       column.For(x => x.LocaleTypeId).Hidden(true);
                       column.For(x => x.ChildLocaleTypeCode).Hidden(true);
                   })
                   .ColumnLayouts(metroLayouts =>
                   {
                       metroLayouts.For(x => x.Locales)
                           .PrimaryKey("LocaleId")
                           .ForeignKey("ParentLocaleId")
                           .AutoGenerateColumns(false)
                           .Width("100%")
                           .AutoGenerateLayouts(false)
                           .RenderCheckboxes(true)
                           .Columns(column =>
                           {
                                column.For(x => x.LocaleName).HeaderText("Metro").Width("40%");
                                column.For(x => x.OpenDate).HeaderText("Open Date").DataType("date").Width("20%");
                                column.For(x => x.CloseDate).HeaderText("Close Date").DataType("date").Width("20%");
                                column.For(x => x.LocaleAddLink).HeaderText("Administration").Width("20%").Format("ReadOnly");
                                column.For(x => x.LocaleId).Hidden(true);
                                column.For(x => x.ParentLocaleId).Hidden(true);
                                column.For(x => x.OwnerOrgPartyId).Hidden(true);
                                column.For(x => x.LocaleTypeDesc).Hidden(true);
                                column.For(x => x.LocaleTypeId).Hidden(true);
                                column.For(x => x.ChildLocaleTypeCode).Hidden(true);
                           })
                           .ColumnLayouts(storeLayouts =>
                           {
                                storeLayouts.For(x => x.Locales)
                                    .PrimaryKey("LocaleId")
                                    .ForeignKey("ParentLocaleId")
                                    .AutoGenerateColumns(false)
                                    .Width("100%")
                                    .AutoGenerateLayouts(false)
                                    .RenderCheckboxes(true)
                                    .Columns(column =>
                                    {
                                        column.For(x => x.LocaleName).HeaderText("Store").Width("10%");
                                        column.For(x => x.StoreAbbreviation).HeaderText("Abbr").Width("4%");
                                        column.For(x => x.BusinessUnitId).HeaderText("Business Unit").DataType("string").Width("4%");
                                        column.For(x => x.OpenDate).HeaderText("Open Date").DataType("date").Width("5%");
                                        column.For(x => x.CloseDate).HeaderText("Close Date").DataType("date").Width("3%");
                                        column.For(x => x.AddressLine1).HeaderText("Address Line 1").DataType("string").Width("14%");
                                        column.For(x => x.AddressLine2).HeaderText("Address Line 2").DataType("string").Width("4%");
                                        column.For(x => x.AddressLine3).HeaderText("Address Line 3").DataType("string").Width("4%");
                                        column.For(x => x.City).HeaderText("City").Width("8%");
                                        column.For(x => x.County).HeaderText("County").Width("6%");
                                        column.For(x => x.TerritoryId).HeaderText("State/Province").Width("2%").FormatterFunction("lookupTerritoryCode");
                                        column.For(x => x.PostalCode).HeaderText("Postal Code").Width("5%");
                                        column.For(x => x.CountryId).HeaderText("Country").Width("4%").FormatterFunction("lookupCountryCode");
                                        column.For(x => x.TimeZoneId).HeaderText("Time Zone").Width("4%").FormatterFunction("lookupTimeZoneCode");
                                        column.For(x => x.Latitude).HeaderText("Latitude").Width("7%");
                                        column.For(x => x.Longitude).HeaderText("Longitude").Width("7%");
                                        column.For(x => x.PhoneNumber).HeaderText("Phone Number").Width("3%");
                                        column.For(x => x.Fax).HeaderText("Fax").Width("3%");
                                        column.For(x => x.ContactPerson).HeaderText("Contact Person").Width("3%");
                                        column.For(x => x.EwicAgencyId).HeaderText("eWIC Agency").Width("2%");
                                        column.For(x => x.IrmaStoreId).HeaderText("IRMA Store Number").Width("2%");
                                        column.For(x => x.StorePosType).HeaderText("POS Type").Width("2%");
                                        column.For(x => x.ChildLocaleTypeCode).Hidden(true);
                                        column.For(x => x.LocaleId).Hidden(true);
                                        column.For(x => x.ParentLocaleId).Hidden(true);
                                        column.For(x => x.OwnerOrgPartyId).Hidden(true);
                                        column.For(x => x.LocaleTypeDesc).Hidden(true);
                                        column.For(x => x.LocaleTypeId).Hidden(true);
                                        column.For(x => x.AddressID).Hidden(true);
                                    })
                                    .Features(feature =>
                                    {
                                        feature.Resizing();
                                        feature.Updating()
                                            .EnableAddRow(false)
                                            .EnableDeleteRow(false)
                                            .StartEditTriggers(GridStartEditTriggers.DblClick)
                                            .ColumnSettings(colSetting =>
                                            {
                                                colSetting.ColumnSetting().ColumnKey("LocaleId").ReadOnly(true);
                                                colSetting.ColumnSetting().ColumnKey("ParentLocaleId").ReadOnly(true);
                                                colSetting.ColumnSetting().ColumnKey("LocaleName")
                                                    .Required(true)
                                                    .EditorOptions("textEditorOptions: {width: 500}");
                                                colSetting.ColumnSetting().ColumnKey("StoreAbbreviation")
                                                    .Required(true)
                                                    .Validation(true)
                                                    .EditorType(ColumnEditorType.Text)
                                                    .EditorOptions(@"validatorOptions: {errorMessage: '" + IconResources.Store.StoreAbbreviationValidationMessage + @"', regExp:/^[A-Z]{3}$/}");
                                                colSetting.ColumnSetting().ColumnKey("BusinessUnitId")
                                                    .Required(true)
                                                    .Validation(true)
                                                    .EditorType(ColumnEditorType.Numeric)
                                                    .NumericEditorOptions(o => o.MaxDecimals(0).MaxValue(99999).MinValue(10000).GroupSeparator(String.Empty).TextAlignment(TextEditorTextAlignment.Left));
                                                colSetting.ColumnSetting().ColumnKey("OpenDate").EditorType(ColumnEditorType.DatePicker);
                                                colSetting.ColumnSetting().ColumnKey("CloseDate").EditorType(ColumnEditorType.DatePicker);
                                                colSetting.ColumnSetting().ColumnKey("AddressLine1")
                                                    .Required(true)
                                                    .Validation(true)
                                                    .TextEditorOptions(option => option.ValidatorOptions(vo => vo.MaxLength(200)));
                                                colSetting.ColumnSetting().ColumnKey("AddressLine2")
                                                    .Validation(true)
                                                    .TextEditorOptions(option => option.ValidatorOptions(vo => vo.MaxLength(200)));
                                                colSetting.ColumnSetting().ColumnKey("AddressLine3")
                                                    .Validation(true)
                                                    .TextEditorOptions(option => option.ValidatorOptions(vo => vo.MaxLength(200)));
                                                colSetting.ColumnSetting().ColumnKey("City")
                                                    .Required(true)
                                                    .Validation(true)
                                                    .TextEditorOptions(option => option.ValidatorOptions(vo => vo.MaxLength(50)));
                                                colSetting.ColumnSetting().ColumnKey("County")
                                                    .Required(true)
                                                    .Validation(true)
                                                    .TextEditorOptions(option => option.ValidatorOptions(vo => vo.MaxLength(255)));
                                                colSetting.ColumnSetting().ColumnKey("PostalCode")
                                                    .Required(true)
                                                    .Validation(true)
                                                    .EditorType(ColumnEditorType.Text)
                                                    .EditorOptions(@"validatorOptions: {errorMessage: '" + IconResources.Store.PostalCodeValidationMessage + @"', regExp:/^[\w ]+$/}");
                                                colSetting.ColumnSetting().ColumnKey("Latitude")
                                                    .Validation(true)
                                                    .EditorType(ColumnEditorType.Text)
                                                    .EditorOptions(@"validatorOptions: {errorMessage: '" + IconResources.Store.LatitudeValidationMessage + @"', regExp:/^-?([1-8]?[0-9]\.\d{6}$|90\.0{6}$)/}");
                                                colSetting.ColumnSetting().ColumnKey("Longitude")
                                                    .Validation(true)
                                                    .EditorType(ColumnEditorType.Text)
                                                    .EditorOptions(@"validatorOptions: {errorMessage: '" + IconResources.Store.LongitudeValidationMessage + @"', regExp:/^-?((180\.[0]{6})|((1[0-7]\d)|\d?\d)\.[\d]{6}$)/}");
                                                colSetting.ColumnSetting().ColumnKey("PhoneNumber")
                                                    .Required(true)
                                                    .Validation(true)
                                                    .EditorType(ColumnEditorType.Text)
                                                    .EditorOptions(@"validatorOptions: {errorMessage: '" + IconResources.Store.PhoneNumberValidationMessage + @"', regExp:/(^([0-9]{3}-)[0-9]{3}-[0-9]{4}$)|^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))?$/}");
                                                colSetting.ColumnSetting().ColumnKey("ContactPerson")
                                                    .Validation(true)
                                                    .TextEditorOptions(option => option
                                                        .ValidatorOptions(vo => vo.MaxLength(40)));
                                                colSetting.ColumnSetting().ColumnKey("AddressID").ReadOnly(true);
                                                colSetting.ColumnSetting().ColumnKey("TerritoryId")
                                                    .Required(true)
                                                    .EditorType(ColumnEditorType.Combo)
                                                    .ComboEditorOptions(territoryOptions =>
                                                        territoryOptions.DataSource(Model.Territories.AsQueryable())
                                                            .ValueKey("TerritoryId")
                                                            .TextKey("TerritoryCode")
                                                            .ShowDropDownButton(true)
                                                            .RenderMatchItemsCondition(ComboRenderMatchItemsCondition.Contains)
                                                            .AllowCustomValue(false)
                                                            .Virtualization(true)
                                                            .DropDownWidth(600));
                                                colSetting.ColumnSetting().ColumnKey("CountryId")
                                                    .Required(true)
                                                    .EditorType(ColumnEditorType.Combo)
                                                    .ComboEditorOptions(countryOptions =>
                                                        countryOptions.DataSource(Model.Countries.AsQueryable())
                                                            .ValueKey("CountryId")
                                                            .TextKey("CountryCode")
                                                            .ShowDropDownButton(true)
                                                            .RenderMatchItemsCondition(ComboRenderMatchItemsCondition.Contains)
                                                            .AllowCustomValue(false)
                                                            .Virtualization(true)
                                                            .DropDownWidth(200));
                                                colSetting.ColumnSetting().ColumnKey("TimeZoneId")
                                                    .Required(true)
                                                    .EditorType(ColumnEditorType.Combo)
                                                    .ComboEditorOptions(timeZoneOptions =>
                                                        timeZoneOptions.DataSource(Model.TimeZones.AsQueryable())
                                                            .ValueKey("TimeZoneId")
                                                            .TextKey("TimeZoneName")
                                                            .ShowDropDownButton(true)
                                                            .RenderMatchItemsCondition(ComboRenderMatchItemsCondition.Contains)
                                                            .AllowCustomValue(false)
                                                            .Virtualization(true)
                                                            .DropDownWidth(500));
                                                colSetting.ColumnSetting().ColumnKey("EwicAgencyId")
                                                    .Required(false)
                                                    .EditorType(ColumnEditorType.Combo)
                                                    .ComboEditorOptions(eWicOptions =>
                                                        eWicOptions.DataSource(Model.EwicAgencies.AsQueryable())
                                                            .ValueKey("AgencyId")
                                                            .TextKey("AgencyId")
                                                            .ShowDropDownButton(true)
                                                            .RenderMatchItemsCondition(ComboRenderMatchItemsCondition.Contains)
                                                            .AllowCustomValue(false)
                                                            .Virtualization(true)                                                            
                                                            .DropDownWidth(200));
                                                colSetting.ColumnSetting().ColumnKey("StorePosType")
                                                    .Required(false)
                                                    .EditorType(ColumnEditorType.Combo)
                                                    .ComboEditorOptions(posTypeOptions =>
                                                        posTypeOptions.DataSource(Model.StorePosTypes.AsQueryable())
                                                            .ShowDropDownButton(true)
                                                            .RenderMatchItemsCondition(ComboRenderMatchItemsCondition.Contains)
                                                            .AllowCustomValue(false)
                                                            .Virtualization(true)
                                                            .DropDownWidth(200));
                                                colSetting.ColumnSetting().ColumnKey("Fax")
                                                    .Validation(true)
                                                    .EditorType(ColumnEditorType.Text)
                                                    .EditorOptions(@"validatorOptions: {errorMessage: '" + IconResources.Store.FaxValidationMessage + @"', regExp:/(^([0-9]{3}-)[0-9]{3}-[0-9]{4}$)|^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))?$/}"); ;
                                                colSetting.ColumnSetting().ColumnKey("IrmaStoreId")
                                                    .Validation(true)
                                                    .EditorType(ColumnEditorType.Text)
                                                    .EditorOptions(@"validatorOptions: {errorMessage: '" + IconResources.Store.IrmaStoreId + @"', regExp:/^$|^([0-9]){1,5}$/}");
                                                        
                                            })
                                            .EditMode(GridEditMode.RowEditTemplate)
                                            .RowEditDialogHeight("800px")
                                            .RowEditDialogWidth("700px")
                                            .RowEditDialogFieldWidth("500px")
                                            .SaveChangesSuccessHandler("onSuccess")
                                            .SaveChangesErrorHandler("onError");
                                    });
                           });
                   });
            })
            .UpdateUrl(Url.Action("SaveChanges"))
            .PrimaryKey("LocaleId")
            .ForeignKey("ParentLocaleId")
            .DataBind()
            .Render()
        );

        <input type="button" id="saveButton" class="btn btn-default form-submit" value="Save Changes" />
        
        <div class="search-alert page-subsection"></div>
    }
    else
    {
        <h4>No store hierarchy data was found.</h4>
    }
</div>
