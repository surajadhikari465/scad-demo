<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="msg_concurrencyError" xml:space="preserve">
    <value>Your changes could not be saved.  Another user has recently updated this data.</value>
    <comment>Concurrency error pop up</comment>
  </data>
  <data name="msg_confirmDeleteData" xml:space="preserve">
    <value>Do you wish to delete this data?</value>
    <comment>Delete Data confirm popup msg</comment>
  </data>
  <data name="msg_confirmSaveData" xml:space="preserve">
    <value>You have made changes to the data.  Do you wish to save this data?</value>
    <comment>Save Data confirm popup msg</comment>
  </data>
  <data name="msg_confirmUpdateMultiple" xml:space="preserve">
    <value>Are you sure you want to update {0} {1}?</value>
    <comment>{0} = number of items, {1} = type of items</comment>
  </data>
  <data name="msg_dbError" xml:space="preserve">
    <value>An error was encountered while processing your request.  Please try again.</value>
    <comment>Database error occurred during processing</comment>
  </data>
  <data name="msg_deleteConfirmation" xml:space="preserve">
    <value>Are you sure you want to delete item: {0}</value>
    <comment>delete confirmation message; {0} = deleted item text</comment>
  </data>
  <data name="msg_selectDeleteRow" xml:space="preserve">
    <value>Please select a row to delete</value>
    <comment>Select row before clicking 'Delete' button</comment>
  </data>
  <data name="msg_selectEditRow" xml:space="preserve">
    <value>Please select a row to edit.</value>
    <comment>Select row before clicking 'Edit' button</comment>
  </data>
  <data name="msg_titleConfirm" xml:space="preserve">
    <value>Confirm</value>
    <comment>Title bar text for Confirm popups</comment>
  </data>
  <data name="msg_titleGenericError" xml:space="preserve">
    <value>"IRMA Application Error"</value>
    <comment>Title bar text for generic error popups</comment>
  </data>
  <data name="msg_titleWarning" xml:space="preserve">
    <value>Warning</value>
    <comment>Title bar text for Warning popups</comment>
  </data>
  <data name="msg_unexpectedError" xml:space="preserve">
    <value>The application has encountered an unexpected error.  Your request is unable to be processed.</value>
    <comment>Unexpected error occurred during processing</comment>
  </data>
  <data name="msg_validation_decimalRounding" xml:space="preserve">
    <value>{0} - must be a whole number.  Please round the value appropriately and remove the decimal point</value>
    <comment>{0} = affected field text</comment>
  </data>
  <data name="msg_validation_endDatePastStartDate" xml:space="preserve">
    <value>{0} - must be greater than the {1}</value>
    <comment>{0} = end date; {1} = start date</comment>
  </data>
  <data name="msg_validation_fieldLength" xml:space="preserve">
    <value>{0} - must be {1} {2} in length.</value>
    <comment>{0} = field name, {1} = length value, {2} = value type (e.g. Characters, Digits)</comment>
  </data>
  <data name="msg_validation_greaterThanZero" xml:space="preserve">
    <value>{0} - must be greater than zero</value>
    <comment>{0} = affected field text</comment>
  </data>
  <data name="msg_validation_nonNegativeInteger" xml:space="preserve">
    <value>{0} - must be an integer greater than or equal to 0</value>
    <comment>{0} = affected field text</comment>
  </data>
  <data name="msg_validation_nonNegativeNumber" xml:space="preserve">
    <value>{0} - must be a positive number</value>
    <comment>{0} = affected field text</comment>
  </data>
  <data name="msg_validation_notNumeric" xml:space="preserve">
    <value>{0} - must be numeric</value>
    <comment>required numeric value message text; {0} = affected field text</comment>
  </data>
  <data name="msg_validation_required" xml:space="preserve">
    <value>{0} - required</value>
    <comment>required field message text; {0} = affected field text</comment>
  </data>
  <data name="msg_validation_startDateInFuture" xml:space="preserve">
    <value>{0} - must be greater than or equal to today</value>
    <comment>{0} = start date</comment>
  </data>
</root>