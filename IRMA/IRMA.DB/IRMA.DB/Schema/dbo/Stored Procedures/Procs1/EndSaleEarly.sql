--END SALE EARLY FOR THE PriceBatchDetailID PASSED IN AS WELL AS ANY AFFECTED AUTO-GENERATED RECORDS OCCURING AFTER
--THE RECORD THAT IS ENDING EARLY
CREATE PROCEDURE dbo.EndSaleEarly
	@PriceBatchDetailID int,   --ID OF SALE BEING ENDED EARLY
	@Item_Key int,			   --ITEM KEY OF ITEM BEING ENDED EARLY
	@Store_No int,			   --STORE THAT SALE IS ENDING EARLY FOR
    @NewSaleEndDate smalldatetime, --NEW SALE END DATE    
    @Multiple tinyint,
    @Price smallmoney,
    @POSPrice smallmoney, 
    @User_ID int, 
    @User_ID_Date datetime,
    @ValidationCode int OUTPUT
AS
BEGIN
    SET NOCOUNT ON

	DECLARE @error_no int
    SET @error_no = 0
    BEGIN TRAN
     
	--[STEPS TAKEN FROM TECH SPEC FOR 'END SALE EARLY AND CANCEL ALL SALES' DOCUMENTATION]

	--STEP 1
	--1.	If there are PriceBatchDetail records for the Store/Item with a Sale PriceChgTypeID 
	--      assigned to a batch header record and the batch header record is in the Building state, 
	--      the PriceBatchDetail records will be removed from the batch by setting the PriceBatchHeaderID 
	--      in the PriceBatchDetail table to NULL.
	BEGIN
		UPDATE PriceBatchDetail SET PriceBatchHeaderID = NULL
		WHERE PriceBatchDetailID IN (
			SELECT PBD.PriceBatchDetailID
			FROM PriceBatchDetail PBD
			INNER JOIN Item I (nolock)
				ON PBD.Item_Key = I.Item_Key			
			INNER JOIN PriceChgType PCT (nolock)
				ON PCT.PriceChgTypeID = PBD.PriceChgTypeID
			INNER JOIN PriceBatchHeader PBH (nolock)
				ON PBH.PriceBatchHeaderID = PBD.PriceBatchHeaderID
			WHERE I.Item_Key = @Item_Key
				AND PBD.Store_No = @Store_No 
				AND PCT.On_Sale = 1 --SALE BATCH	
				AND PBD.PriceBatchHeaderID IS NOT NULL --ASSIGNED TO A BATCH
				AND PBH.PriceBatchStatusID = 1
				AND Expired <> 1)

		SELECT @error_no = @@ERROR
	END

	IF @error_no = 0
    BEGIN
		--FIND SPECIFIC BATCH THAT IS ENDING EARLY SO IT CAN BE EXPIRED
		UPDATE PriceBatchDetail SET Expired = 1, EndedEarly = 1
		WHERE PriceBatchDetailID IN (
			SELECT PBD.PriceBatchDetailID
			FROM PriceBatchDetail PBD (nolock)
			INNER JOIN
				Store (nolock)
				ON Store.Store_No = PBD.Store_No
			INNER JOIN
				PriceChgType (nolock) PCT
				ON PCT.PriceChgTypeID = PBD.PriceChgTypeID
			LEFT JOIN
				PriceBatchHeader PBH (nolock)
				ON PBD.PriceBatchHeaderID = PBH.PriceBatchHeaderID
			WHERE PBD.PriceBatchDetailID = @PriceBatchDetailID)
		
		SELECT @error_no = @@ERROR
	END

	IF @error_no = 0
    BEGIN
		--FIND PENDING AUTO-GENERATED BATCHES AFFECTED BY END OF ABOVE SALE; THESE MUST ALSO BE EXPIRED
		UPDATE PriceBatchDetail SET Expired = 1, EndedEarly = 1
		WHERE PriceBatchDetailID IN (
			SELECT PBD.PriceBatchDetailID
			FROM PriceBatchDetail PBD (nolock)
			INNER JOIN
				Store (nolock)
				ON Store.Store_No = PBD.Store_No
			INNER JOIN
				PriceChgType (nolock) PCT
				ON PCT.PriceChgTypeID = PBD.PriceChgTypeID
			LEFT JOIN
				PriceBatchHeader PBH (nolock)
				ON PBD.PriceBatchHeaderID = PBH.PriceBatchHeaderID
			WHERE PBD.Item_Key = @Item_Key
				AND PBD.Store_No = @Store_No
				AND PBD.PriceChgTypeID IS NOT NULL --PRICE CHANGES REQUIRED
				AND Expired = 0 --EXCLUDE EXPIRED PRICE BATCHES
				AND PBD.StartDate > (SELECT StartDate FROM PriceBatchDetail WHERE PriceBatchDetailID = @PriceBatchDetailID) --RECORDS OCCURING AFTER THE SALE BEING ENDED EARLY
				AND AutoGenerated = 1) --AUTO GENERATED
		
		SELECT @error_no = @@ERROR
	END
	
	IF @error_no = 0
    BEGIN
		--ENTER NEW SALE ITEM FOR ITEM THAT WAS EXPIRED
		
		DECLARE @PriceChgTypeID tinyint
		DECLARE @StartDate smalldatetime		
		DECLARE @MSRPPrice smallmoney
		DECLARE @MSRPMultiple tinyint
		DECLARE @PricingMethod_ID int
		DECLARE @Sale_Multiple tinyint
		DECLARE @Sale_Price smallmoney
		DECLARE @POSSale_Price smallmoney
		DECLARE @Sale_Earned_Disc1 tinyint
		DECLARE @Sale_Earned_Disc2 tinyint
		DECLARE @Sale_Earned_Disc3 tinyint		
		DECLARE @LineDrive bit
		DECLARE @SLIMRequestId int
		
		--GET THE PREVIOUS PBD VALUES FOR THE SALE THAT WAS ENDED EARLY SO IT CAN BE RECREATED IN PBD
		SELECT @PriceChgTypeID = PriceChgTypeID, 
				@StartDate = CONVERT(VarChar(20), GETDATE(), 101) ,-- TFS 12690 -- Use the date the sale was ended as the new start date so it can be easily found in batching											
				@MSRPPrice = MSRPPrice,
				@MSRPMultiple = MSRPMultiple,
				@PricingMethod_ID = PricingMethod_ID,
				@Sale_Multiple = Sale_Multiple,
				@Sale_Price = Sale_Price,
				@POSSale_Price = POSSale_Price,
				@Sale_Earned_Disc1 = Sale_Earned_Disc1,
				@Sale_Earned_Disc2 = Sale_Earned_Disc2,
				@Sale_Earned_Disc3 = Sale_Earned_Disc3,
				@LineDrive = LineDrive,
				@SLIMRequestId = SLIMRequestID
		FROM PriceBatchDetail
		WHERE PriceBatchDetailID = @PriceBatchDetailID
		
		--UPDATE THE END DATE OF THE SLIM ISS RECORD TO BE TODAY
		IF ISNULL(@SLIMRequestId,0) > 0
			UPDATE SLIM_InStoreSpecials SET EndDate = DATEADD(day,-1,GETDATE()) WHERE RequestID = @SLIMRequestId
	    
	    SELECT @error_no = @@ERROR
	END
	
	IF @error_no = 0
		BEGIN
		--INSERT NEW REG PRICE FOR THIS STORE/ITEM
		--EXEC UpdatePriceBatchDetailPromo @Item_Key, @User_ID, @User_ID_Date, @Store_No, @PriceChgTypeID, @StartDate, @Multiple,
		--								@Price, @POSPrice, @MSRPPrice, @MSRPMultiple, @PricingMethod_ID, @Sale_Multiple, @Sale_Price, 
		--								@POSSale_Price, @NewSaleEndDate, @Sale_Earned_Disc1, @Sale_Earned_Disc2, @Sale_Earned_Disc3,
		--								-1, @LineDrive, 'IRMA Client', 1, @ValidationCode OUTPUT
										
		EXEC UpdatePriceBatchDetailPromo @Item_Key, @User_ID, @User_ID_Date, @Store_No, @PriceChgTypeID, @StartDate, @Multiple,
										@Price, @POSPrice, @MSRPPrice, @MSRPMultiple, @PricingMethod_ID, @Sale_Multiple, @Sale_Price, 
										@POSSale_Price, @NewSaleEndDate, @Sale_Earned_Disc1, @Sale_Earned_Disc2, @Sale_Earned_Disc3,
										-1, @LineDrive, NULL, 'IRMA Client', 1, @ValidationCode OUTPUT
										
		IF @ValidationCode > 0 AND dbo.fn_IsWarningValidationCode(@ValidationCode) = 0
			BEGIN
			-- A price change validation error occured during the save.  
			-- Rollback the transaction
			IF @@TRANCOUNT <> 0
				ROLLBACK TRAN
			
			-- The error number for the validation code is returned to the user as an output parameter.
			RETURN
			END
			
	    SELECT @error_no = @@ERROR
		END
	    
    IF @Error_No = 0
        COMMIT TRAN
    ELSE
    BEGIN
        IF @@TRANCOUNT <> 0
            ROLLBACK TRAN
        DECLARE @Severity smallint
        SELECT @Severity = ISNULL((SELECT severity FROM master.dbo.sysmessages WHERE error = @error_no), 16)
        RAISERROR ('EndSaleEarly failed with @@ERROR: %d', @Severity, 1, @error_no)
    END    
    
    SET NOCOUNT OFF

END
GO
GRANT EXECUTE
    ON OBJECT::[dbo].[EndSaleEarly] TO [IRMAClientRole]
    AS [dbo];


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[EndSaleEarly] TO [IRMASLIMRole]
    AS [dbo];

