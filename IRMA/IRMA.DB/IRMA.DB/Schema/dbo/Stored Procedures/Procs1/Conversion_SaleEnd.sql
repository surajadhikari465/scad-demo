CREATE PROCEDURE [dbo].[Conversion_SaleEnd]  AS
BEGIN

-- Note that this assumes that all current and future sales are already in PriceBatchDetail

DECLARE 
	@PriceChgTypeId	int,
	@RegPriceChgTypeID int,
	@PriceBatchHeaderID int,
	@Today datetime,
	@SalePlaceholderTypeId int

DECLARE @PriceTypeCursor Cursor

SELECT @Today = convert(datetime,CONVERT(VARCHAR(10),GETDATE(),101), 101)

SELECT @RegPriceChgTypeID = PriceChgTypeId
FROM	PriceChgType
WHERE	On_Sale = 0

-- insert any missing Sale Start PriceBatchDetails from the Price table.  
-- these should all be inserted earlier in conversion, but some are often missing

INSERT INTO PriceBatchDetail (AsOfDate, AutoGenerated, Expired, Item_Key, Store_No, PriceChgTypeID, 
	StartDate, Multiple, Price, POSPrice, MSRPPrice, MSRPMultiple, PricingMethod_ID, Sale_Multiple, Sale_Price, 
	POSSale_Price,
	Sale_End_Date, Sale_Max_Quantity, Sale_Earned_Disc1, Sale_Earned_Disc2, Sale_Earned_Disc3, InsertApplication)

SELECT 
	P.Sale_Start_Date as AsOfDate, 
	1				     as AutoGenerated,
	0				     as Expired,
	P.Item_Key		  as Item_Key,
	P.Store_No		  as Store_No,
	P.PriceChgTypeId  as PriceChgTypeId,
	P.Sale_Start_Date as StartDate,
	Multiple, Price, POSPrice, MSRPPrice, MSRPMultiple, PricingMethod_ID, Sale_Multiple, Sale_Price, 
	POSSale_Price,
	Sale_End_Date, Sale_Max_Quantity, Sale_Earned_Disc1, Sale_Earned_Disc2, Sale_Earned_Disc3,
	'Conversion'	as InsertApplication
from Price P
where PriceChgTypeId <> @RegPriceChgTypeID
and not exists (select 1 
	from PriceBatchDetail PBD
	where P.Item_Key = PBD.Item_Key
	  and P.Store_No = PBD.Store_No
	  and PBD.StartDate < @Today)

-- create a placeholder batch for all sales currently in progress

select @SalePlaceholderTypeId = max(PriceChgTypeId)
from PriceChgType where on_sale = 1 and PriceChgTypeDesc != 'DIS'

INSERT INTO PriceBatchHeader 
	(PriceBatchStatusID,	ItemChgTypeId,		PriceChgTypeId,		StartDate,
	PrintedDate,			SentDate,			ProcessedDate,		POSBatchID,
	BatchDescription,		AutoApplyFlag,		ApplyDate)

VALUES
	(6, NULL, @SalePlaceholderTypeId, @Today,
	getdate(), getdate(), getdate(), 0,
	'CONVERSION BATCH', 0, @Today)
SELECT @PriceBatchHeaderID = SCOPE_IDENTITY()

-- add any existing PriceBatchDetail records to the conversion batch
-- this way, they are not available for batching, but they are still
-- functioning correctly to supersede lower priority sales

UPDATE PriceBatchDetail
SET PriceBatchHeaderId = @PriceBatchHeaderID
WHERE StartDate < getdate()

-- loop through all available Sale Price Types, going from highest priority to lowest
-- For any prices in the Price table with those price types, we need an entry to
-- turn that sale off at the end, whether that's to a lower priority sale or just REG

set @PriceTypeCursor = Cursor for
	SELECT PriceChgTypeID 
	FROM PriceChgType 
	WHERE On_Sale = 1
	ORDER BY Priority Desc

open @PriceTypeCursor
Fetch Next from @PriceTypeCursor Into @PriceChgTypeId
WHILE (@@FETCH_STATUS = 0)
	BEGIN
	
	-- For sales that end during another sale, insert another PBD entry for that other sale.  
		
	INSERT INTO PriceBatchDetail (AsOfDate, AutoGenerated, Expired, Item_Key, Store_No, PriceChgTypeID, 
	StartDate, Multiple, Price, POSPrice, MSRPPrice, MSRPMultiple, PricingMethod_ID, Sale_Multiple, Sale_Price, POSSale_Price, 
	Sale_End_Date, Sale_Max_Quantity, Sale_Mix_Match, Sale_Earned_Disc1, Sale_Earned_Disc2, Sale_Earned_Disc3, InsertApplication)
	SELECT	P.Sale_End_Date	as AsOfDate,
			1						as AutoGenerated,
			0						as Expired,
			PBD_Existing.Item_Key, 
			PBD_Existing.Store_No, 
			PBD_Existing.PriceChgTypeID, 
--			PBD_Existing.StartDate, 
			dateadd(d,1,P.Sale_End_Date) as StartDate,
			PBD_Existing.Multiple, 
			PBD_Existing.Price, 
			PBD_Existing.POSPrice, 
			PBD_Existing.MSRPPrice, 
			PBD_Existing.MSRPMultiple, 
			PBD_Existing.PricingMethod_ID, 
			PBD_Existing.Sale_Multiple, 
			PBD_Existing.Sale_Price, 
			PBD_Existing.POSSale_Price, 
			PBD_Existing.Sale_End_Date, 
			PBD_Existing.Sale_Max_Quantity, 
			PBD_Existing.Sale_Mix_Match, 
			PBD_Existing.Sale_Earned_Disc1, 
			PBD_Existing.Sale_Earned_Disc2, 
			PBD_Existing.Sale_Earned_Disc3,
			'Conversion'	as InsertApplication
	FROM	Price P
	INNER JOIN PriceBatchDetail PBD_Existing
			ON	P.Item_Key	= PBD_Existing.Item_Key
			AND	P.Store_No	= PBD_Existing.Store_No
			AND P.Sale_End_Date < PBD_Existing.Sale_End_Date
			AND PBD_Existing.StartDate < getdate() 
			-- if it hasn't started yet, just use the one already in the table, since we know that's unsent
	WHERE	P.PriceChgTypeID = @PriceChgTypeId
	  AND	PBD_Existing.PriceBatchDetailID = (
				SELECT TOP 1 PriceBatchDetailID
					 FROM PriceBatchDetail PBD_Top,
						PriceChgType	PCT
					 WHERE P.Store_No = PBD_Top.Store_No 
					   AND P.Item_Key = PBD_Top.Item_Key
					   AND P.Sale_End_Date < PBD_Top.Sale_End_Date
					   AND PBD_Top.StartDate < getdate()
					   AND PCT.PriceChgTypeID = PBD_Top.PriceChgTypeId
					 ORDER BY PCT.Priority DESC, PBD_Top.StartDate DESC)

	-- insert a REG row where there is no other sale available for the sale end date

	INSERT INTO PriceBatchDetail (AsOfDate, AutoGenerated, Expired, Item_Key, Store_No, PriceChgTypeID, 
		StartDate, Multiple, Price, POSPrice, MSRPPrice, MSRPMultiple, PricingMethod_ID, Sale_Multiple, Sale_Price, 
		POSSale_Price,Sale_End_Date, Sale_Max_Quantity, Sale_Mix_Match, Sale_Earned_Disc1, Sale_Earned_Disc2, Sale_Earned_Disc3, InsertApplication)
	SELECT	P.Sale_End_Date	as AsOfDate,
			1						as AutoGenerated,
			0						as Expired,
			P.Item_Key, 
			P.Store_No, 
			@RegPriceChgTypeID		as PriceChgTypeID, 
			dateadd(d,1, P.Sale_End_Date) 
									as StartDate,
			P.Multiple, 
			P.Price, 
			P.POSPrice,
			P.MSRPPrice, 
			P.MSRPMultiple,
			NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
			'Conversion'	as InsertApplication
	FROM	Price P
	WHERE	P.PriceChgTypeID = @PriceChgTypeId
	  AND	NOT EXISTS (
			SELECT 1 
			FROM PriceBatchDetail PBD_Existing
			 WHERE P.Store_No = PBD_Existing.Store_No 
			   AND P.Item_Key = PBD_Existing.Item_Key
			   AND P.Sale_End_Date >= PBD_Existing.StartDate 
			   AND P.Sale_End_Date < PBD_Existing.Sale_End_Date)
	  AND	P.Sale_End_Date < '2079-06-06'

	Fetch Next from @PriceTypeCursor Into @PriceChgTypeId
	END

-- This next section removes duplicates that will be created if this is run twice.  
-- This should return zero rows unless this is somehow run manually or something.

delete PriceBatchDetail
where PriceChgTypeId is not null
and exists (select 1 from PriceBatchDetail PBD
	where PBD.Store_No = PriceBatchDetail.Store_No
	  and PBD.Item_Key = PriceBatchDetail.Item_Key
	  and PBD.PriceChgTypeId = PriceBatchDetail.PriceChgTypeId
	  and PBD.StartDate = PriceBatchDetail.StartDate
	  and PBD.PriceBatchDetailId > PriceBatchDetail.PriceBatchDetailId)
	  
--cleanup price batch detail 
delete from pricebatchdetail where 
	itemchgtypeid = (select itemchgtypeid from itemchgtype where itemchgtypedesc = 'Item') 
	and priceChgTypeId is NULL

END
GO
GRANT EXECUTE
    ON OBJECT::[dbo].[Conversion_SaleEnd] TO [DataMigration]
    AS [dbo];

