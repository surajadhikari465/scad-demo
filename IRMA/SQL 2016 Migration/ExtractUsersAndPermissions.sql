/*
-------------------------------------------
Script to generate login and user security
March, 2017

Primary author: Amit Uppal
Extra notes: Tom Lux
-------------------------------------------

How to use:
- Set config-option bits to control what security statements are generated by this script.
- Run this script against a target DB.
- SQL will be generated that can be run against a new DB instance to create logins and users.

By default, two options are disabled:
- @DatabaseLevelExplicitPermissions: because these grants should come from our security/grants script.
- @Default_DB_Master: because some users may have a different default DB and changing that could cause errors, depending on up-stream assumptions.

*/


--https://support.microsoft.com/en-us/help/918992/how-to-transfer-logins-and-passwords-between-instances-of-sql-server
-- Assumptions:
--From and To Servers are in same Domain
--default database is copied from server. If Default database does not exist on destination then it will throw error

SET NOCOUNT ON 

 --Declare Variables
DECLARE @CreateScriptForServerLevelSecurity bit = 1  -- Deny or grant permissions at server level
DECLARE @CreateScriptForServerLevelRolesScript bit = 1 -- call sp_addsrvrolemember to add user to roles
DECLARE @CreateScriptForDatabaseLevelSecurity bit = 1 --database level security
DECLARE @CreateScriptForDatabaseLevelRoles bit =1 --sp_AddRoleMember --database level roles
DECLARE @DatabaseLevelExplicitPermissions  bit =0 --database level explicit permissions
DECLARE  @Default_DB_Master  bit =0 --when 1 it will set default database to master for all  users --

--Create Temporary Tables
Create Table #tmp (Message Varchar(MAX))
Create Table #permissions (Field Varchar(80), ToScriptOrNot Bit)



-- insert data into permission table

INSERT INTO #permissions
SELECT 'CreateScriptForServerLevelSecurity',@CreateScriptForServerLevelSecurity

INSERT INTO #permissions
SELECT 'CreateScriptForServerLevelRolesScript',@CreateScriptForServerLevelRolesScript

INSERT INTO #permissions
SELECT 'CreateScriptForDatabaseLevelSecurity',@CreateScriptForDatabaseLevelSecurity

INSERT INTO #permissions
SELECT 'CreateScriptForDatabaseLevelRoles',@CreateScriptForDatabaseLevelRoles


INSERT INTO #permissions
SELECT 'DatabaseLevelExplicitPermissions',@DatabaseLevelExplicitPermissions

INSERT INTO #permissions
SELECT 'Default_DB_Master',@Default_DB_Master

IF OBJECT_ID ('sp_hexadecimal') IS NOT NULL
  DROP PROCEDURE sp_hexadecimal
GO
CREATE PROCEDURE sp_hexadecimal
    @binvalue varbinary(256),
    @hexvalue varchar (514) OUTPUT
AS

	DECLARE @charvalue varchar (514)
	DECLARE @i int
	DECLARE @length int
	DECLARE @hexstring char(16)
	SELECT @charvalue = '0x'
	SELECT @i = 1
	SELECT @length = DATALENGTH (@binvalue)
	SELECT @hexstring = '0123456789ABCDEF'
	WHILE (@i <= @length)
	BEGIN
	  DECLARE @tempint int
	  DECLARE @firstint int
	  DECLARE @secondint int
	  SELECT @tempint = CONVERT(int, SUBSTRING(@binvalue,@i,1))
	  SELECT @firstint = FLOOR(@tempint/16)
	  SELECT @secondint = @tempint - (@firstint*16)
	  SELECT @charvalue = @charvalue +
		SUBSTRING(@hexstring, @firstint+1, 1) +
		SUBSTRING(@hexstring, @secondint+1, 1)
	  SELECT @i = @i + 1
	END

	SELECT @hexvalue = @charvalue
	GO
	

	DECLARE @login_name sysname = NULL 
	DECLARE @name sysname
	DECLARE @type varchar (1)
	DECLARE @hasaccess int
	DECLARE @denylogin int
	DECLARE @is_disabled int
	DECLARE @PWD_varbinary  varbinary (256)
	DECLARE @PWD_string  varchar (514)
	DECLARE @SID_varbinary varbinary (85)
	DECLARE @SID_string varchar (514)
	DECLARE @tmpstr  varchar (1024)
	DECLARE @is_policy_checked varchar (3)
	DECLARE @is_expiration_checked varchar (3)
	Declare @result nvarchar(max)
	DECLARE @defaultdb sysname
	 SET @result =''
	 DECLARE @NewLineChar AS CHAR(2) = CHAR(13) + CHAR(10)

IF (@login_name IS NULL)
  DECLARE login_curs CURSOR FOR

      SELECT p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin FROM 
			sys.server_principals p LEFT JOIN sys.syslogins l
			ON ( l.name = p.name ) WHERE p.type IN ( 'S', 'G', 'U' ) AND p.name <> 'sa'
ELSE
  DECLARE login_curs CURSOR FOR


      SELECT p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin FROM 
			sys.server_principals p LEFT JOIN sys.syslogins l
			ON ( l.name = p.name ) WHERE p.type IN ( 'S', 'G', 'U' ) AND p.name = @login_name
OPEN login_curs

FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin
IF (@@fetch_status = -1)
BEGIN
	  PRINT 'No login(s) found.'
	  CLOSE login_curs
	  DEALLOCATE login_curs
  --RETURN -1
END
SET @tmpstr = '/* sp_help_revlogin script '
SET @tmpstr = '** Generated ' + CONVERT (varchar, GETDATE()) + ' on ' + @@SERVERNAME + ' */'
WHILE (@@fetch_status <> -1)
BEGIN
  IF (@@fetch_status <> -2)
  BEGIN
    SET @tmpstr = '-- Login: ' + @name

IF((SELECT ToScriptOrNot FROM #permissions WHERE Field  ='Default_DB_Master')=1)
	BEGIN
			SET @defaultdb = 'master'
	END

    IF (@type IN ( 'G', 'U'))
    BEGIN -- NT authenticated account/group
		 SET @tmpstr ='If NOT EXISTS (SELECT loginname FROM MASTER.dbo.syslogins WHERE name = ' + ''''+ @name +'''' + ' ) '
		SET @tmpstr = @tmpstr +' BEGIN '
		SET @tmpstr = @tmpstr + 'CREATE LOGIN ' + QUOTENAME( @name ) + ' FROM WINDOWS WITH DEFAULT_DATABASE = [' + @defaultdb + ']'
		--SET @tmpstr = @tmpstr +' END ' 
		--SET @tmpstr = @tmpstr +' ELSE ' 
		--SET @tmpstr = @tmpstr +' BEGIN '
		--SET @tmpstr = @tmpstr+ ' Print'+ ''''+ ' Login ' +  @name + ' Already Exists.' + ''''
		--SET @tmpstr = @tmpstr +' END ' 
    END
    ELSE BEGIN -- SQL Server authentication
        -- obtain password and sid
            SET @PWD_varbinary = CAST( LOGINPROPERTY( @name, 'PasswordHash' ) AS varbinary (256) )
        EXEC sp_hexadecimal @PWD_varbinary, @PWD_string OUT
        EXEC sp_hexadecimal @SID_varbinary,@SID_string OUT
 
        -- obtain password policy state
        SELECT @is_policy_checked = CASE is_policy_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END FROM sys.sql_logins WHERE name = @name
        SELECT @is_expiration_checked = CASE is_expiration_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END FROM sys.sql_logins WHERE name = @name
			 SET @tmpstr ='If NOT EXISTS (SELECT loginname FROM MASTER.dbo.syslogins WHERE name = ' + ''''+ @name +'''' + ' ) '
			SET @tmpstr = @tmpstr +' BEGIN '
			SET @tmpstr = @tmpstr + 'CREATE LOGIN ' + QUOTENAME( @name ) + ' WITH PASSWORD = ' + @PWD_string + ' HASHED, SID = ' + @SID_string + ', DEFAULT_DATABASE = [' + @defaultdb + ']'
			
        IF ( @is_policy_checked IS NOT NULL )
        BEGIN
          SET @tmpstr = @tmpstr + ', CHECK_POLICY = ' + @is_policy_checked
        END
        IF ( @is_expiration_checked IS NOT NULL )
        BEGIN
          SET @tmpstr = @tmpstr + ', CHECK_EXPIRATION = ' + @is_expiration_checked
        END
		
    END
    IF (@denylogin = 1)
    BEGIN -- login is denied access
      SET @tmpstr = @tmpstr + '; DENY CONNECT SQL TO ' + QUOTENAME( @name )
    END
    ELSE IF (@hasaccess = 0)
    BEGIN -- login exists but does not have access
      SET @tmpstr = @tmpstr + '; REVOKE CONNECT SQL TO ' + QUOTENAME( @name )
    END
    IF (@is_disabled = 1)
    BEGIN -- login is disabled

      SET @tmpstr = @tmpstr + '; ALTER LOGIN ' + QUOTENAME( @name ) + ' DISABLE'
    END
	SET @tmpstr = @tmpstr +' END ' 
			SET @tmpstr = @tmpstr +' ELSE ' 
			SET @tmpstr = @tmpstr +' BEGIN '
			SET @tmpstr = @tmpstr+ ' Print'+ ''''+ ' Login ' +  @name  + ' Already Exists.' + ''''
			SET @tmpstr = @tmpstr +' END ' 
	INSERT INTO  #tmp  Values(@tmpstr)
	SET @result = @result + @tmpstr +@NewLineChar 

   -- PRINT @tmpstr
  END

  FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin
   END
CLOSE login_curs
DEALLOCATE login_curs
--print create login statements
--SELECT @result
GO
	

	INSERT INTO  #tmp 
	SELECT 'GO'



	IF((SELECT ToScriptOrNot FROM #permissions WHERE Field  ='CreateScriptForServerLevelSecurity')=1)
	BEGIN
		INSERT INTO  #tmp 
		SELECT '--Server Level Security'
	--Server Level Security
		INSERT INTO  #tmp 
		SELECT
			sp.state_desc + N' ' + sp.permission_name + N' TO ' + cast(QUOTENAME(spl.name COLLATE DATABASE_DEFAULT) as nvarchar(256)) AS "T-SQL Script"
			FROM sys.server_permissions sp
			inner join sys.server_principals spl on (sp.grantee_principal_id = spl.principal_id)
			where spl.name not like '##%' -- skip PBM accounts
			and spl.name not in ('dbo', 'sa', 'public')
			order by sp.permission_name, spl.name

				 INSERT INTO  #tmp 
				SELECT 'GO'

    END
GO
	IF((SELECT ToScriptOrNot FROM #permissions WHERE Field  ='CreateScriptForServerLevelRolesScript')=1)
	BEGIN
		INSERT INTO  #tmp 
		SELECT '--Server Level Roles Script'

	--Print 'Creating Script for Adding users to server roles'
		INSERT INTO #tmp 
		SELECT  DISTINCT
			'EXEC master..sp_addsrvrolemember @loginame = N''' + m.name + ''', @rolename = N''' + sp.name + '''' AS "Server Level Roles Script"
			FROM sys.server_role_members AS srm
				INNER JOIN sys.server_principals sp on (srm.role_principal_id = sp.principal_id)
				INNER JOIN sys.server_principals m on (srm.member_principal_id = m.principal_id)
				WHERE sp.is_disabled = 0
				AND m.is_disabled = 0
				AND m.name NOT IN ('dbo', 'sa', 'public')
				AND m.name <> 'NT AUTHORITY\SYSTEM'

				INSERT INTO  #tmp 
				SELECT 'GO'
	 END
GO

	IF((SELECT ToScriptOrNot FROM #permissions WHERE Field  ='CreateScriptForDatabaseLevelSecurity')=1)
	BEGIN

		INSERT INTO  #tmp 
		SELECT '--Database Level Security'

		INSERT INTO #tmp 
		SELECT 
			dp.state_desc + N' ' + dp.permission_name + N' TO ' + cast(QUOTENAME(dpl.name COLLATE DATABASE_DEFAULT) as nvarchar(500))  AS "Database Level Security"
			FROM sys.database_permissions AS dp
				INNER JOIN sys.database_principals AS dpl ON (dp.grantee_principal_id = dpl.principal_id)
				WHERE dp.major_id = 0
				AND dpl.name NOT LIKE '##%' 
				AND dpl.name NOT IN ('dbo', 'sa', 'public')
				ORDER BY dp.permission_name ASC, dp.state_desc ASC

				INSERT INTO  #tmp 
				SELECT 'GO'
	END

GO

	IF((SELECT ToScriptOrNot FROM #permissions WHERE Field  ='CreateScriptForDatabaseLevelRoles')=1)
	BEGIN

			INSERT INTO  #tmp 
			SELECT '--Database Level Roles'
		
			INSERT INTO #tmp 
			SELECT 
			'EXECUTE sp_AddRoleMember ''' + roles.name + ''', ''' + users.name + ''''  AS "Database Level Roles"
			FROM sys.database_principals users
			INNER JOIN sys.database_role_members link
			ON link.member_principal_id = users.principal_id
			INNER JOIN sys.database_principals roles
			ON roles.principal_id = link.role_principal_id

			INSERT INTO  #tmp 
			SELECT 'GO'
	END

   GO

   
	
	IF((SELECT ToScriptOrNot FROM #permissions WHERE Field  ='DatabaseLevelExplicitPermissions')=1)
	BEGIN


		INSERT INTO #tmp 
		SELECT    
		dp.state_desc + N' ' + dp.permission_name + N' ON '    + QUOTENAME(SCHEMA_NAME(obj.schema_id)) + '.' + QUOTENAME(obj.name)    + N' TO ' + QUOTENAME(dpl.name COLLATE database_default) AS "Database Level Explicit Permissions"
		FROM    sys.database_permissions AS dp
				INNER JOIN sys.objects AS obj ON ( dp.major_id = obj.[object_id] )
				INNER JOIN sys.database_principals AS dpl ON ( dp.grantee_principal_id = dpl.principal_id )
				LEFT JOIN sys.columns AS col ON ( col.column_id = dp.minor_id  AND col.[object_id] = dp.major_id)
		WHERE   obj.name NOT LIKE 'dt%'
				AND obj.is_ms_shipped = 0
				AND dpl.name NOT IN ( 'dbo', 'sa', 'public' )
		ORDER BY dp.permission_name ASC ,    dp.state_desc ASC

		INSERT INTO  #tmp 
		SELECT 'GO'
	END
GO

	

	SELECT * from #tmp
	DROP  PROCEDURE sp_hexadecimal
	DROP TABLE #tmp
	DROP TABLE #permissions

	SET NOCOUNT OFF 