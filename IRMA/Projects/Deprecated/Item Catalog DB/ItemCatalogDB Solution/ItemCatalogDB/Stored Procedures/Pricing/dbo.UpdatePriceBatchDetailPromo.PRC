SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'dbo.UpdatePriceBatchDetailPromo') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure dbo.UpdatePriceBatchDetailPromo
GO

CREATE PROCEDURE dbo.UpdatePriceBatchDetailPromo
    @Item_Key int,
    @User_ID int,
    @User_ID_Date datetime,
    @Store_No int,
    @PriceChgTypeID tinyint,
    @StartDate smalldatetime,
    @Multiple tinyint,
    @Price smallmoney,
    @POSPrice smallmoney, 
    @MSRPPrice smallmoney,
    @MSRPMultiple tinyint,
    @PricingMethod_ID int,
    @Sale_Multiple tinyint,
    @Sale_Price smallmoney,
    @POSSale_Price smallmoney,
    @Sale_End_Date smalldatetime,
    @Sale_Earned_Disc1 tinyint,
    @Sale_Earned_Disc2 tinyint,
    @Sale_Earned_Disc3 tinyint,
    @PriceBatchDetailID int,
    @LineDrive bit,
	-- new params placed at the end so they can be optional
	@SLIMRequestID int = NULL,
    @InsertApplication varchar(30) = NULL,
    @EndSaleEarly bit = 0,
    @ValidationCode int OUTPUT
AS

BEGIN
    SET NOCOUNT ON

    DECLARE @Error_No int, @Severity smallint
    SELECT @Error_No = 0

    IF @User_ID IS NOT NULL
        IF NOT EXISTS (SELECT * FROM Item (rowlock) WHERE Item_Key = @Item_Key AND User_ID = @User_ID AND User_ID_Date = @User_ID_Date)
        BEGIN
            RAISERROR ('Item is not locked by the current user or the lock date-time do not match', 16, 1)
            RETURN
        END

    -- Validate the price change data before attempting the save.
    SET @ValidationCode = dbo.fn_ValidatePromoPriceChange(@Item_Key,@Store_No,@PriceChgTypeID,@StartDate,@Sale_End_Date,@Multiple,@Price,@Sale_Multiple,@Sale_Price,@MSRPMultiple,@MSRPPrice,@EndSaleEarly,@PriceBatchDetailID)

	IF @ValidationCode = 0 OR dbo.fn_IsWarningValidationCode(@ValidationCode) = 1
	BEGIN
		-- The validation was a success.  Save the updates to the database.

		-- TFS 6447: UK - Promo sale RP upload does not change the Sale_Price
		-- @Sale_Price and @POSSale_Price are set to the same value in the IRMA client; remove VAT from @Sale_Price if used by region
		IF @POSSale_Price IS NOT NULL
			IF ISNULL(@Sale_Price, 0) = ISNULL(@POSSale_Price, 0)
				IF dbo.fn_InstanceDataValue('UseVAT', @Store_No) = 1 
					SELECT @Sale_Price = ISNULL(@POSSale_Price, 0) / (ISNULL(TD.TaxPercent/100, 0) + 1) 
					FROM dbo.Store S (NOLOCK)
						LEFT JOIN dbo.TaxFlag TF (NOLOCK) ON TF.TaxJurisdictionID = S.TaxJurisdictionID
						LEFT JOIN dbo.TaxDefinition TD (NOLOCK) ON TD.TaxFlagKey = TF.TaxFlagKey
							AND TD.TaxJurisdictionID = TF.TaxJurisdictionID
					WHERE S.Store_No = @Store_No
						AND TF.TaxFlagValue = 1
						AND TF.TaxClassID = (SELECT TaxClassID FROM dbo.Item (NOLOCK) WHERE Item_Key = @Item_Key)

		BEGIN TRAN
		-- Main update/insert
		IF @PriceBatchDetailID = -1 
		BEGIN
		-- don't insert if there's already a row there with that Item/Store/StartDate/PriceType combo;
		-- this is needed because EIM attempts to insert data that has NOT changed in EIM; must prevent duplicates
		-- ignore 3 Sale_Earned_Discount fields because EIM passes in NULL every time
		IF NOT EXISTS(SELECT 1
			FROM	PriceBatchDetail PBD (nolock)
			LEFT JOIN PriceBatchHeader PBH (nolock)
			ON PBD.PriceBatchHeaderID = PBH.PriceBatchHeaderID
			WHERE	Item_Key = @Item_Key
			  AND	Store_No = @Store_No
			  AND	PBD.PriceChgTypeId = @PriceChgTypeId
			  AND	PBD.StartDate = @StartDate
			  AND	Multiple = @Multiple
			  AND	Price = @Price
			  AND	MSRPPrice = @MSRPPrice
			  AND	MSRPMultiple = @MSRPMultiple
			  AND	PricingMethod_ID = @PricingMethod_ID
			  AND	Sale_Multiple = @Sale_Multiple
			  AND	Sale_Price = @Sale_Price
			  AND	Sale_End_Date = @Sale_End_Date		 
			  AND	LineDrive = @LineDrive
			  AND	POSSale_Price = @POSSale_Price
			  AND	POSPrice = @POSPrice
			  AND	Expired = 0
			  AND	ISNULL(PBH.PriceBatchStatusID, 0) < 6)

			  BEGIN
				INSERT INTO PriceBatchDetail (Item_Key, Store_No, PriceChgTypeID, StartDate, Multiple, Price, MSRPPrice, MSRPMultiple, PricingMethod_ID, Sale_Multiple, Sale_Price, Sale_End_Date, Sale_Earned_Disc1, Sale_Earned_Disc2, Sale_Earned_Disc3, LineDrive, POSSale_Price, POSPrice, AutoGenerated, Expired,  SLIMRequestID, InsertApplication, User_ID, User_ID_Date)
				VALUES (@Item_Key, @Store_No, @PriceChgTypeID, @StartDate, @Multiple, @Price, @MSRPPrice, @MSRPMultiple, @PricingMethod_ID, @Sale_Multiple, @Sale_Price, @Sale_End_Date, @Sale_Earned_Disc1, @Sale_Earned_Disc2, @Sale_Earned_Disc3, @LineDrive, @POSSale_Price, @POSPrice, 0, 0,  @SLIMRequestID, @InsertApplication, @User_ID, @User_ID_Date)

				SELECT @Error_No = @@ERROR
			  END
		END
		ELSE
		BEGIN

			IF @Error_No = 0
			BEGIN
				UPDATE PriceBatchDetail
				SET PriceChgTypeID = @PriceChgTypeID,
					StartDate = @StartDate,
					Multiple = @Multiple,
					Price = @Price,
					MSRPPrice = @MSRPPrice,
					MSRPMultiple = @MSRPMultiple,
					PricingMethod_ID = @PricingMethod_ID,
					Sale_Multiple = @Sale_Multiple,
					Sale_Price = @Sale_Price,
					Sale_End_Date = @Sale_End_Date,
					Sale_Earned_Disc1 = @Sale_Earned_Disc1,
					Sale_Earned_Disc2 = @Sale_Earned_Disc2,
					Sale_Earned_Disc3 = @Sale_Earned_Disc3,
					LineDrive = @LineDrive,
					SLIMRequestID=@SLIMRequestID,
					POSSale_Price = @POSSale_Price,
					POSPrice = @POSPrice,
					AutoGenerated = 0,
					Expired = 0
				WHERE PriceBatchDetailID = @PriceBatchDetailID
	    
				SELECT @Error_No = @@ERROR
			END

		END

		SET NOCOUNT OFF

		IF @error_no = 0
			COMMIT TRAN
		ELSE
		BEGIN
			IF @@TRANCOUNT <> 0
				ROLLBACK TRAN
			SELECT @Severity = ISNULL((SELECT severity FROM master.dbo.sysmessages WHERE error = @error_no), 16)
			RAISERROR ('UpdatePriceBatchDetailPromo> failed with @@ERROR: %d', @Severity, 1, @error_no)
		END
	END

	RETURN @ValidationCode
	
END

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

