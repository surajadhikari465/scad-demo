<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllItems" xml:space="preserve">
    <value>&lt; All &gt;</value>
  </data>
  <data name="CannotRematchItem" xml:space="preserve">
    <value>One or more of the rows you have selected cannot be re-matched.</value>
  </data>
  <data name="CompetitorPriceSearch" xml:space="preserve">
    <value>Competitor Price Search</value>
  </data>
  <data name="ConfirmQuitTitle" xml:space="preserve">
    <value>Confirm Quit</value>
  </data>
  <data name="ExcelErrorRowIndex" xml:space="preserve">
    <value>Row {0}: </value>
    <comment>0: Excel worksheet row number</comment>
  </data>
  <data name="ExistingCompetitorPrices" xml:space="preserve">
    <value>There are {0} competitor prices that already exist. Do you want to overwrite them?</value>
    <comment>0: Overlap count</comment>
  </data>
  <data name="ExistingCompetitorPricesTitle" xml:space="preserve">
    <value>Pricing info exists</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File Not Found</value>
  </data>
  <data name="FiscalWeekRange" xml:space="preserve">
    <value>Fiscal week range cannot end before it starts</value>
  </data>
  <data name="FiscalWeekRangeTitle" xml:space="preserve">
    <value>Fiscal Week Range</value>
  </data>
  <data name="FixErrors" xml:space="preserve">
    <value>Please fix errors before continuing; they are highlighted in yellow.</value>
  </data>
  <data name="FixErrorsTitle" xml:space="preserve">
    <value>Data Validation</value>
  </data>
  <data name="ImportConfirmQuit" xml:space="preserve">
    <value>Are you sure you want to quit Competitor Store Import?</value>
  </data>
  <data name="ImportErrorGeneric" xml:space="preserve">
    <value>Validation failed: {0}</value>
    <comment>0: Error message</comment>
  </data>
  <data name="ImportErrorLimit" xml:space="preserve">
    <value>Reached limit of {0} errors.</value>
    <comment>0: Error count limit</comment>
  </data>
  <data name="ImportErrorMessage" xml:space="preserve">
    <value>Validation failed: Data is missing or columns are malformatted.</value>
  </data>
  <data name="ImportErrorTitle" xml:space="preserve">
    <value>Please fix the following issues</value>
  </data>
  <data name="ImportFailed" xml:space="preserve">
    <value>Import failed.</value>
  </data>
  <data name="ImportMalformattedValue" xml:space="preserve">
    <value>Malformatted value for column {0}</value>
    <comment>0: Column name</comment>
  </data>
  <data name="ImportMatching" xml:space="preserve">
    <value>Matching</value>
  </data>
  <data name="ImportMissingOrMalformattedValue" xml:space="preserve">
    <value>Missing or malformatted value for column {0}</value>
    <comment>0: Column name</comment>
  </data>
  <data name="ImportMissingValue" xml:space="preserve">
    <value>Missing value for column {0}</value>
    <comment>0: Column name</comment>
  </data>
  <data name="ImportSuccessful" xml:space="preserve">
    <value>Import successful!</value>
  </data>
  <data name="ImportUploadingData" xml:space="preserve">
    <value>Uploading Data...</value>
  </data>
  <data name="ImportValidating" xml:space="preserve">
    <value>Validating</value>
  </data>
  <data name="ItemDescription" xml:space="preserve">
    <value>UPC: {0} - {1}</value>
    <comment>0: UPC 1: Item Description</comment>
  </data>
  <data name="MatchItem" xml:space="preserve">
    <value>Item must be matched</value>
  </data>
  <data name="NoItems" xml:space="preserve">
    <value>&lt; None &gt;</value>
  </data>
  <data name="NoPricesFound" xml:space="preserve">
    <value>No prices found.</value>
  </data>
  <data name="NoWorksheetFound" xml:space="preserve">
    <value>No worksheets found to import.</value>
  </data>
  <data name="PriorityChangeSingleStore" xml:space="preserve">
    <value>Please select a single store to change priority</value>
  </data>
  <data name="RequireCompetitor" xml:space="preserve">
    <value>Competitor is required</value>
  </data>
  <data name="RequireCompetitorLocation" xml:space="preserve">
    <value>Competitor Location is required</value>
  </data>
  <data name="RequireCompetitorStore" xml:space="preserve">
    <value>Competitor Store is required</value>
  </data>
  <data name="RequireFiscalYear" xml:space="preserve">
    <value>Fiscal Year is required</value>
  </data>
  <data name="RequirePrice" xml:space="preserve">
    <value>Price is required</value>
  </data>
  <data name="RequirePriceMultiple" xml:space="preserve">
    <value>Price multiple is required</value>
  </data>
  <data name="RequireSize" xml:space="preserve">
    <value>Size is required</value>
  </data>
  <data name="SelectCompetitorStore" xml:space="preserve">
    <value>Please select a competitor store to continue.</value>
  </data>
  <data name="SelectCompetitorStoreTitle" xml:space="preserve">
    <value>Select a competitor store</value>
  </data>
  <data name="SelectItem" xml:space="preserve">
    <value>Please select an item to continue.</value>
  </data>
  <data name="SelectItemTitle" xml:space="preserve">
    <value>Select an Item</value>
  </data>
  <data name="SelectOneStore" xml:space="preserve">
    <value>Select One Store</value>
  </data>
  <data name="SelectRows" xml:space="preserve">
    <value>Please select one or more rows.</value>
  </data>
  <data name="SelectRowsTitle" xml:space="preserve">
    <value>Select Rows</value>
  </data>
  <data name="SelectStore" xml:space="preserve">
    <value>Please select a store.</value>
  </data>
  <data name="SelectStoreTitle" xml:space="preserve">
    <value>Select a Store</value>
  </data>
  <data name="UnableToOpenWorkbook" xml:space="preserve">
    <value>Unable to open workbook.</value>
  </data>
  <data name="UnavailableRows" xml:space="preserve">
    <value>Unavailable Rows</value>
  </data>
  <data name="UnsavedChangesBeforeExit" xml:space="preserve">
    <value>You have unsaved changes. Do you want to discard them and exit?</value>
  </data>
  <data name="UnsavedChangesBeforeSearch" xml:space="preserve">
    <value>Would you like to save your changes before continuing? No will discard them and Cancel will leave the changes and stop the search.</value>
  </data>
  <data name="UnsavedChangesTitle" xml:space="preserve">
    <value>Unsaved Changes</value>
  </data>
  <data name="UploadFailed" xml:space="preserve">
    <value>Upload failed.</value>
  </data>
  <data name="UploadProgressItemName" xml:space="preserve">
    <value>Prices</value>
  </data>
  <data name="UploadProgressMessage" xml:space="preserve">
    <value>Please wait...</value>
  </data>
  <data name="UploadProgressTitle" xml:space="preserve">
    <value>Uploading competitor data</value>
  </data>
  <data name="UploadStatistics" xml:space="preserve">
    <value>Upload Complete.{0}Upload duration: {1:0.00} seconds{0}Matching duration: {2:0.00}</value>
    <comment>0: Newline 1: Upload duration (seconds) 2: Matching duration (seconds)</comment>
  </data>
</root>