'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace WholeFoods.IRMA.CompetitorStore.BusinessLogic
    
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("CompetitorStoreDataSet"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class CompetitorStoreDataSet
        Inherits Global.System.Data.DataSet
        
        Private tableCompetitorImportInfo As CompetitorImportInfoDataTable
        
        Private tableCompetitorPrice As CompetitorPriceDataTable
        
        Private tableCompetitorImportSession As CompetitorImportSessionDataTable
        
        Private tableFiscalWeek As FiscalWeekDataTable
        
        Private tableCompetitor As CompetitorDataTable
        
        Private tableCompetitorLocation As CompetitorLocationDataTable
        
        Private tableCompetitorStore As CompetitorStoreDataTable
        
        Private tableCompetitorStoreIdentifier As CompetitorStoreIdentifierDataTable
        
        Private tableStoreCompetitorStore As StoreCompetitorStoreDataTable
        
        Private tableItemUnit As ItemUnitDataTable
        
        Private relationFK_CompetitorImportSession_CompetitorImportInfo As Global.System.Data.DataRelation
        
        Private relationFK_FiscalWeek_CompetitorImportInfo As Global.System.Data.DataRelation
        
        Private relationFK_CompetitorImportInfo_ItemUnit As Global.System.Data.DataRelation
        
        Private relationFK_FiscalWeek_CompetitorPrice As Global.System.Data.DataRelation
        
        Private relationFK_ItemUnit_CompetitorPrice As Global.System.Data.DataRelation
        
        Private relationFK_CompetitorStore_StoreCompetitorStore As Global.System.Data.DataRelation
        
        Private relationFK_CompetitorStore_Competitor As Global.System.Data.DataRelation
        
        Private relationFK_CompetitorStore_CompetitorLocation As Global.System.Data.DataRelation
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("CompetitorImportInfo")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorImportInfoDataTable(ds.Tables("CompetitorImportInfo")))
                End If
                If (Not (ds.Tables("CompetitorPrice")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorPriceDataTable(ds.Tables("CompetitorPrice")))
                End If
                If (Not (ds.Tables("CompetitorImportSession")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorImportSessionDataTable(ds.Tables("CompetitorImportSession")))
                End If
                If (Not (ds.Tables("FiscalWeek")) Is Nothing) Then
                    MyBase.Tables.Add(New FiscalWeekDataTable(ds.Tables("FiscalWeek")))
                End If
                If (Not (ds.Tables("Competitor")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorDataTable(ds.Tables("Competitor")))
                End If
                If (Not (ds.Tables("CompetitorLocation")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorLocationDataTable(ds.Tables("CompetitorLocation")))
                End If
                If (Not (ds.Tables("CompetitorStore")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorStoreDataTable(ds.Tables("CompetitorStore")))
                End If
                If (Not (ds.Tables("CompetitorStoreIdentifier")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorStoreIdentifierDataTable(ds.Tables("CompetitorStoreIdentifier")))
                End If
                If (Not (ds.Tables("StoreCompetitorStore")) Is Nothing) Then
                    MyBase.Tables.Add(New StoreCompetitorStoreDataTable(ds.Tables("StoreCompetitorStore")))
                End If
                If (Not (ds.Tables("ItemUnit")) Is Nothing) Then
                    MyBase.Tables.Add(New ItemUnitDataTable(ds.Tables("ItemUnit")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property CompetitorImportInfo() As CompetitorImportInfoDataTable
            Get
                Return Me.tableCompetitorImportInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property CompetitorPrice() As CompetitorPriceDataTable
            Get
                Return Me.tableCompetitorPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property CompetitorImportSession() As CompetitorImportSessionDataTable
            Get
                Return Me.tableCompetitorImportSession
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property FiscalWeek() As FiscalWeekDataTable
            Get
                Return Me.tableFiscalWeek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Competitor() As CompetitorDataTable
            Get
                Return Me.tableCompetitor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property CompetitorLocation() As CompetitorLocationDataTable
            Get
                Return Me.tableCompetitorLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property CompetitorStore() As CompetitorStoreDataTable
            Get
                Return Me.tableCompetitorStore
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property CompetitorStoreIdentifier() As CompetitorStoreIdentifierDataTable
            Get
                Return Me.tableCompetitorStoreIdentifier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property StoreCompetitorStore() As StoreCompetitorStoreDataTable
            Get
                Return Me.tableStoreCompetitorStore
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property ItemUnit() As ItemUnitDataTable
            Get
                Return Me.tableItemUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.BrowsableAttribute(true),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As CompetitorStoreDataSet = CType(MyBase.Clone,CompetitorStoreDataSet)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (Not (ds.Tables("CompetitorImportInfo")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorImportInfoDataTable(ds.Tables("CompetitorImportInfo")))
                End If
                If (Not (ds.Tables("CompetitorPrice")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorPriceDataTable(ds.Tables("CompetitorPrice")))
                End If
                If (Not (ds.Tables("CompetitorImportSession")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorImportSessionDataTable(ds.Tables("CompetitorImportSession")))
                End If
                If (Not (ds.Tables("FiscalWeek")) Is Nothing) Then
                    MyBase.Tables.Add(New FiscalWeekDataTable(ds.Tables("FiscalWeek")))
                End If
                If (Not (ds.Tables("Competitor")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorDataTable(ds.Tables("Competitor")))
                End If
                If (Not (ds.Tables("CompetitorLocation")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorLocationDataTable(ds.Tables("CompetitorLocation")))
                End If
                If (Not (ds.Tables("CompetitorStore")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorStoreDataTable(ds.Tables("CompetitorStore")))
                End If
                If (Not (ds.Tables("CompetitorStoreIdentifier")) Is Nothing) Then
                    MyBase.Tables.Add(New CompetitorStoreIdentifierDataTable(ds.Tables("CompetitorStoreIdentifier")))
                End If
                If (Not (ds.Tables("StoreCompetitorStore")) Is Nothing) Then
                    MyBase.Tables.Add(New StoreCompetitorStoreDataTable(ds.Tables("StoreCompetitorStore")))
                End If
                If (Not (ds.Tables("ItemUnit")) Is Nothing) Then
                    MyBase.Tables.Add(New ItemUnitDataTable(ds.Tables("ItemUnit")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableCompetitorImportInfo = CType(MyBase.Tables("CompetitorImportInfo"),CompetitorImportInfoDataTable)
            If (initTable = true) Then
                If (Not (Me.tableCompetitorImportInfo) Is Nothing) Then
                    Me.tableCompetitorImportInfo.InitVars
                End If
            End If
            Me.tableCompetitorPrice = CType(MyBase.Tables("CompetitorPrice"),CompetitorPriceDataTable)
            If (initTable = true) Then
                If (Not (Me.tableCompetitorPrice) Is Nothing) Then
                    Me.tableCompetitorPrice.InitVars
                End If
            End If
            Me.tableCompetitorImportSession = CType(MyBase.Tables("CompetitorImportSession"),CompetitorImportSessionDataTable)
            If (initTable = true) Then
                If (Not (Me.tableCompetitorImportSession) Is Nothing) Then
                    Me.tableCompetitorImportSession.InitVars
                End If
            End If
            Me.tableFiscalWeek = CType(MyBase.Tables("FiscalWeek"),FiscalWeekDataTable)
            If (initTable = true) Then
                If (Not (Me.tableFiscalWeek) Is Nothing) Then
                    Me.tableFiscalWeek.InitVars
                End If
            End If
            Me.tableCompetitor = CType(MyBase.Tables("Competitor"),CompetitorDataTable)
            If (initTable = true) Then
                If (Not (Me.tableCompetitor) Is Nothing) Then
                    Me.tableCompetitor.InitVars
                End If
            End If
            Me.tableCompetitorLocation = CType(MyBase.Tables("CompetitorLocation"),CompetitorLocationDataTable)
            If (initTable = true) Then
                If (Not (Me.tableCompetitorLocation) Is Nothing) Then
                    Me.tableCompetitorLocation.InitVars
                End If
            End If
            Me.tableCompetitorStore = CType(MyBase.Tables("CompetitorStore"),CompetitorStoreDataTable)
            If (initTable = true) Then
                If (Not (Me.tableCompetitorStore) Is Nothing) Then
                    Me.tableCompetitorStore.InitVars
                End If
            End If
            Me.tableCompetitorStoreIdentifier = CType(MyBase.Tables("CompetitorStoreIdentifier"),CompetitorStoreIdentifierDataTable)
            If (initTable = true) Then
                If (Not (Me.tableCompetitorStoreIdentifier) Is Nothing) Then
                    Me.tableCompetitorStoreIdentifier.InitVars
                End If
            End If
            Me.tableStoreCompetitorStore = CType(MyBase.Tables("StoreCompetitorStore"),StoreCompetitorStoreDataTable)
            If (initTable = true) Then
                If (Not (Me.tableStoreCompetitorStore) Is Nothing) Then
                    Me.tableStoreCompetitorStore.InitVars
                End If
            End If
            Me.tableItemUnit = CType(MyBase.Tables("ItemUnit"),ItemUnitDataTable)
            If (initTable = true) Then
                If (Not (Me.tableItemUnit) Is Nothing) Then
                    Me.tableItemUnit.InitVars
                End If
            End If
            Me.relationFK_CompetitorImportSession_CompetitorImportInfo = Me.Relations("FK_CompetitorImportSession_CompetitorImportInfo")
            Me.relationFK_FiscalWeek_CompetitorImportInfo = Me.Relations("FK_FiscalWeek_CompetitorImportInfo")
            Me.relationFK_CompetitorImportInfo_ItemUnit = Me.Relations("FK_CompetitorImportInfo_ItemUnit")
            Me.relationFK_FiscalWeek_CompetitorPrice = Me.Relations("FK_FiscalWeek_CompetitorPrice")
            Me.relationFK_ItemUnit_CompetitorPrice = Me.Relations("FK_ItemUnit_CompetitorPrice")
            Me.relationFK_CompetitorStore_StoreCompetitorStore = Me.Relations("FK_CompetitorStore_StoreCompetitorStore")
            Me.relationFK_CompetitorStore_Competitor = Me.Relations("FK_CompetitorStore_Competitor")
            Me.relationFK_CompetitorStore_CompetitorLocation = Me.Relations("FK_CompetitorStore_CompetitorLocation")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.DataSetName = "CompetitorStoreDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/CompetitorStoreDataSet.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableCompetitorImportInfo = New CompetitorImportInfoDataTable()
            MyBase.Tables.Add(Me.tableCompetitorImportInfo)
            Me.tableCompetitorPrice = New CompetitorPriceDataTable()
            MyBase.Tables.Add(Me.tableCompetitorPrice)
            Me.tableCompetitorImportSession = New CompetitorImportSessionDataTable()
            MyBase.Tables.Add(Me.tableCompetitorImportSession)
            Me.tableFiscalWeek = New FiscalWeekDataTable()
            MyBase.Tables.Add(Me.tableFiscalWeek)
            Me.tableCompetitor = New CompetitorDataTable()
            MyBase.Tables.Add(Me.tableCompetitor)
            Me.tableCompetitorLocation = New CompetitorLocationDataTable()
            MyBase.Tables.Add(Me.tableCompetitorLocation)
            Me.tableCompetitorStore = New CompetitorStoreDataTable()
            MyBase.Tables.Add(Me.tableCompetitorStore)
            Me.tableCompetitorStoreIdentifier = New CompetitorStoreIdentifierDataTable()
            MyBase.Tables.Add(Me.tableCompetitorStoreIdentifier)
            Me.tableStoreCompetitorStore = New StoreCompetitorStoreDataTable()
            MyBase.Tables.Add(Me.tableStoreCompetitorStore)
            Me.tableItemUnit = New ItemUnitDataTable()
            MyBase.Tables.Add(Me.tableItemUnit)
            Dim fkc As Global.System.Data.ForeignKeyConstraint
            fkc = New Global.System.Data.ForeignKeyConstraint("FK_CompetitorImportSession_CompetitorImportInfo", New Global.System.Data.DataColumn() {Me.tableCompetitorImportSession.CompetitorImportSessionIDColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorImportInfo.CompetitorImportSessionIDColumn})
            Me.tableCompetitorImportInfo.Constraints.Add(fkc)
            fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
            fkc.DeleteRule = Global.System.Data.Rule.Cascade
            fkc.UpdateRule = Global.System.Data.Rule.Cascade
            fkc = New Global.System.Data.ForeignKeyConstraint("FK_FiscalWeek_CompetitorImportInfo", New Global.System.Data.DataColumn() {Me.tableFiscalWeek.FiscalYearColumn, Me.tableFiscalWeek.FiscalPeriodColumn, Me.tableFiscalWeek.PeriodWeekColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorImportInfo.FiscalYearColumn, Me.tableCompetitorImportInfo.FiscalPeriodColumn, Me.tableCompetitorImportInfo.PeriodWeekColumn})
            Me.tableCompetitorImportInfo.Constraints.Add(fkc)
            fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
            fkc.DeleteRule = Global.System.Data.Rule.Cascade
            fkc.UpdateRule = Global.System.Data.Rule.Cascade
            fkc = New Global.System.Data.ForeignKeyConstraint("FK_CompetitorImportInfo_ItemUnit", New Global.System.Data.DataColumn() {Me.tableItemUnit.Unit_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorImportInfo.Unit_IDColumn})
            Me.tableCompetitorImportInfo.Constraints.Add(fkc)
            fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
            fkc.DeleteRule = Global.System.Data.Rule.Cascade
            fkc.UpdateRule = Global.System.Data.Rule.Cascade
            fkc = New Global.System.Data.ForeignKeyConstraint("FK_FiscalWeek_CompetitorPrice", New Global.System.Data.DataColumn() {Me.tableFiscalWeek.FiscalYearColumn, Me.tableFiscalWeek.FiscalPeriodColumn, Me.tableFiscalWeek.PeriodWeekColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorPrice.FiscalYearColumn, Me.tableCompetitorPrice.FiscalPeriodColumn, Me.tableCompetitorPrice.PeriodWeekColumn})
            Me.tableCompetitorPrice.Constraints.Add(fkc)
            fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
            fkc.DeleteRule = Global.System.Data.Rule.None
            fkc.UpdateRule = Global.System.Data.Rule.None
            fkc = New Global.System.Data.ForeignKeyConstraint("FK_ItemUnit_CompetitorPrice", New Global.System.Data.DataColumn() {Me.tableItemUnit.Unit_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorPrice.Unit_IDColumn})
            Me.tableCompetitorPrice.Constraints.Add(fkc)
            fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
            fkc.DeleteRule = Global.System.Data.Rule.Cascade
            fkc.UpdateRule = Global.System.Data.Rule.Cascade
            fkc = New Global.System.Data.ForeignKeyConstraint("FK_CompetitorStore_StoreCompetitorStore", New Global.System.Data.DataColumn() {Me.tableCompetitorStore.CompetitorStoreIDColumn}, New Global.System.Data.DataColumn() {Me.tableStoreCompetitorStore.CompetitorStoreIDColumn})
            Me.tableStoreCompetitorStore.Constraints.Add(fkc)
            fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
            fkc.DeleteRule = Global.System.Data.Rule.Cascade
            fkc.UpdateRule = Global.System.Data.Rule.Cascade
            Me.relationFK_CompetitorImportSession_CompetitorImportInfo = New Global.System.Data.DataRelation("FK_CompetitorImportSession_CompetitorImportInfo", New Global.System.Data.DataColumn() {Me.tableCompetitorImportSession.CompetitorImportSessionIDColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorImportInfo.CompetitorImportSessionIDColumn}, false)
            Me.Relations.Add(Me.relationFK_CompetitorImportSession_CompetitorImportInfo)
            Me.relationFK_FiscalWeek_CompetitorImportInfo = New Global.System.Data.DataRelation("FK_FiscalWeek_CompetitorImportInfo", New Global.System.Data.DataColumn() {Me.tableFiscalWeek.FiscalYearColumn, Me.tableFiscalWeek.FiscalPeriodColumn, Me.tableFiscalWeek.PeriodWeekColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorImportInfo.FiscalYearColumn, Me.tableCompetitorImportInfo.FiscalPeriodColumn, Me.tableCompetitorImportInfo.PeriodWeekColumn}, false)
            Me.Relations.Add(Me.relationFK_FiscalWeek_CompetitorImportInfo)
            Me.relationFK_CompetitorImportInfo_ItemUnit = New Global.System.Data.DataRelation("FK_CompetitorImportInfo_ItemUnit", New Global.System.Data.DataColumn() {Me.tableItemUnit.Unit_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorImportInfo.Unit_IDColumn}, false)
            Me.Relations.Add(Me.relationFK_CompetitorImportInfo_ItemUnit)
            Me.relationFK_FiscalWeek_CompetitorPrice = New Global.System.Data.DataRelation("FK_FiscalWeek_CompetitorPrice", New Global.System.Data.DataColumn() {Me.tableFiscalWeek.FiscalYearColumn, Me.tableFiscalWeek.FiscalPeriodColumn, Me.tableFiscalWeek.PeriodWeekColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorPrice.FiscalYearColumn, Me.tableCompetitorPrice.FiscalPeriodColumn, Me.tableCompetitorPrice.PeriodWeekColumn}, false)
            Me.Relations.Add(Me.relationFK_FiscalWeek_CompetitorPrice)
            Me.relationFK_ItemUnit_CompetitorPrice = New Global.System.Data.DataRelation("FK_ItemUnit_CompetitorPrice", New Global.System.Data.DataColumn() {Me.tableItemUnit.Unit_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorPrice.Unit_IDColumn}, false)
            Me.Relations.Add(Me.relationFK_ItemUnit_CompetitorPrice)
            Me.relationFK_CompetitorStore_StoreCompetitorStore = New Global.System.Data.DataRelation("FK_CompetitorStore_StoreCompetitorStore", New Global.System.Data.DataColumn() {Me.tableCompetitorStore.CompetitorStoreIDColumn}, New Global.System.Data.DataColumn() {Me.tableStoreCompetitorStore.CompetitorStoreIDColumn}, false)
            Me.Relations.Add(Me.relationFK_CompetitorStore_StoreCompetitorStore)
            Me.relationFK_CompetitorStore_Competitor = New Global.System.Data.DataRelation("FK_CompetitorStore_Competitor", New Global.System.Data.DataColumn() {Me.tableCompetitor.CompetitorIDColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorStore.CompetitorIDColumn}, false)
            Me.Relations.Add(Me.relationFK_CompetitorStore_Competitor)
            Me.relationFK_CompetitorStore_CompetitorLocation = New Global.System.Data.DataRelation("FK_CompetitorStore_CompetitorLocation", New Global.System.Data.DataColumn() {Me.tableCompetitorLocation.CompetitorLocationIDColumn}, New Global.System.Data.DataColumn() {Me.tableCompetitorStore.CompetitorLocationIDColumn}, false)
            Me.Relations.Add(Me.relationFK_CompetitorStore_CompetitorLocation)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeCompetitorImportInfo() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeCompetitorPrice() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeCompetitorImportSession() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeFiscalWeek() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeCompetitor() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeCompetitorLocation() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeCompetitorStore() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeCompetitorStoreIdentifier() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeStoreCompetitorStore() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function ShouldSerializeItemUnit() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub CompetitorImportInfoRowChangeEventHandler(ByVal sender As Object, ByVal e As CompetitorImportInfoRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub CompetitorPriceRowChangeEventHandler(ByVal sender As Object, ByVal e As CompetitorPriceRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub CompetitorImportSessionRowChangeEventHandler(ByVal sender As Object, ByVal e As CompetitorImportSessionRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub FiscalWeekRowChangeEventHandler(ByVal sender As Object, ByVal e As FiscalWeekRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub CompetitorRowChangeEventHandler(ByVal sender As Object, ByVal e As CompetitorRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub CompetitorLocationRowChangeEventHandler(ByVal sender As Object, ByVal e As CompetitorLocationRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub CompetitorStoreRowChangeEventHandler(ByVal sender As Object, ByVal e As CompetitorStoreRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub CompetitorStoreIdentifierRowChangeEventHandler(ByVal sender As Object, ByVal e As CompetitorStoreIdentifierRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub StoreCompetitorStoreRowChangeEventHandler(ByVal sender As Object, ByVal e As StoreCompetitorStoreRowChangeEvent)
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Delegate Sub ItemUnitRowChangeEventHandler(ByVal sender As Object, ByVal e As ItemUnitRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class CompetitorImportInfoDataTable
            Inherits Global.System.Data.TypedTableBase(Of CompetitorImportInfoRow)
            
            Private columnCompetitorImportInfoID As Global.System.Data.DataColumn
            
            Private columnCompetitorImportSessionID As Global.System.Data.DataColumn
            
            Private columnItem_Key As Global.System.Data.DataColumn
            
            Private columnWFMIdentifier As Global.System.Data.DataColumn
            
            Private columnCompetitorID As Global.System.Data.DataColumn
            
            Private columnCompetitorLocationID As Global.System.Data.DataColumn
            
            Private columnCompetitorStoreID As Global.System.Data.DataColumn
            
            Private columnFiscalYear As Global.System.Data.DataColumn
            
            Private columnFiscalPeriod As Global.System.Data.DataColumn
            
            Private columnPeriodWeek As Global.System.Data.DataColumn
            
            Private columnCompetitor As Global.System.Data.DataColumn
            
            Private columnLocation As Global.System.Data.DataColumn
            
            Private columnCompetitorStore As Global.System.Data.DataColumn
            
            Private columnUPCCode As Global.System.Data.DataColumn
            
            Private columnDescription As Global.System.Data.DataColumn
            
            Private columnSize As Global.System.Data.DataColumn
            
            Private columnUnitOfMeasure As Global.System.Data.DataColumn
            
            Private columnPriceMultiple As Global.System.Data.DataColumn
            
            Private columnPrice As Global.System.Data.DataColumn
            
            Private columnSaleMultiple As Global.System.Data.DataColumn
            
            Private columnSale As Global.System.Data.DataColumn
            
            Private columnDateChecked As Global.System.Data.DataColumn
            
            Private columnUnit_ID As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "CompetitorImportInfo"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorImportInfoIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorImportInfoID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorImportSessionIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorImportSessionID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Item_KeyColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnItem_Key
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property WFMIdentifierColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnWFMIdentifier
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorLocationIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorLocationID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorStoreIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorStoreID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FiscalYearColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFiscalYear
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FiscalPeriodColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFiscalPeriod
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PeriodWeekColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPeriodWeek
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitor
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLocation
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorStoreColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorStore
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property UPCCodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUPCCode
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SizeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSize
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property UnitOfMeasureColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnitOfMeasure
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PriceMultipleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPriceMultiple
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPrice
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SaleMultipleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSaleMultiple
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SaleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSale
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DateCheckedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDateChecked
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Unit_IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnit_ID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As CompetitorImportInfoRow
                Get
                    Return CType(Me.Rows(index),CompetitorImportInfoRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorImportInfoRowChanging As CompetitorImportInfoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorImportInfoRowChanged As CompetitorImportInfoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorImportInfoRowDeleting As CompetitorImportInfoRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorImportInfoRowDeleted As CompetitorImportInfoRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddCompetitorImportInfoRow(ByVal row As CompetitorImportInfoRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddCompetitorImportInfoRow( _
                        ByVal parentCompetitorImportSessionRowByFK_CompetitorImportSession_CompetitorImportInfo As CompetitorImportSessionRow,  _
                        ByVal Item_Key As Integer,  _
                        ByVal WFMIdentifier As String,  _
                        ByVal CompetitorID As Integer,  _
                        ByVal CompetitorLocationID As Integer,  _
                        ByVal CompetitorStoreID As Integer,  _
                        ByVal FiscalYear As Short,  _
                        ByVal FiscalPeriod As Byte,  _
                        ByVal PeriodWeek As Byte,  _
                        ByVal Competitor As String,  _
                        ByVal Location As String,  _
                        ByVal CompetitorStore As String,  _
                        ByVal UPCCode As String,  _
                        ByVal Description As String,  _
                        ByVal Size As Decimal,  _
                        ByVal UnitOfMeasure As String,  _
                        ByVal PriceMultiple As Byte,  _
                        ByVal Price As Decimal,  _
                        ByVal SaleMultiple As Byte,  _
                        ByVal Sale As Decimal,  _
                        ByVal DateChecked As Date,  _
                        ByVal parentItemUnitRowByFK_CompetitorImportInfo_ItemUnit As ItemUnitRow) As CompetitorImportInfoRow
                Dim rowCompetitorImportInfoRow As CompetitorImportInfoRow = CType(Me.NewRow,CompetitorImportInfoRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Item_Key, WFMIdentifier, CompetitorID, CompetitorLocationID, CompetitorStoreID, FiscalYear, FiscalPeriod, PeriodWeek, Competitor, Location, CompetitorStore, UPCCode, Description, Size, UnitOfMeasure, PriceMultiple, Price, SaleMultiple, Sale, DateChecked, Nothing}
                If (Not (parentCompetitorImportSessionRowByFK_CompetitorImportSession_CompetitorImportInfo) Is Nothing) Then
                    columnValuesArray(1) = parentCompetitorImportSessionRowByFK_CompetitorImportSession_CompetitorImportInfo(0)
                End If
                If (Not (parentItemUnitRowByFK_CompetitorImportInfo_ItemUnit) Is Nothing) Then
                    columnValuesArray(22) = parentItemUnitRowByFK_CompetitorImportInfo_ItemUnit(0)
                End If
                rowCompetitorImportInfoRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCompetitorImportInfoRow)
                Return rowCompetitorImportInfoRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByCompetitorImportInfoID(ByVal CompetitorImportInfoID As Integer) As CompetitorImportInfoRow
                Return CType(Me.Rows.Find(New Object() {CompetitorImportInfoID}),CompetitorImportInfoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CompetitorImportInfoDataTable = CType(MyBase.Clone,CompetitorImportInfoDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CompetitorImportInfoDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnCompetitorImportInfoID = MyBase.Columns("CompetitorImportInfoID")
                Me.columnCompetitorImportSessionID = MyBase.Columns("CompetitorImportSessionID")
                Me.columnItem_Key = MyBase.Columns("Item_Key")
                Me.columnWFMIdentifier = MyBase.Columns("WFMIdentifier")
                Me.columnCompetitorID = MyBase.Columns("CompetitorID")
                Me.columnCompetitorLocationID = MyBase.Columns("CompetitorLocationID")
                Me.columnCompetitorStoreID = MyBase.Columns("CompetitorStoreID")
                Me.columnFiscalYear = MyBase.Columns("FiscalYear")
                Me.columnFiscalPeriod = MyBase.Columns("FiscalPeriod")
                Me.columnPeriodWeek = MyBase.Columns("PeriodWeek")
                Me.columnCompetitor = MyBase.Columns("Competitor")
                Me.columnLocation = MyBase.Columns("Location")
                Me.columnCompetitorStore = MyBase.Columns("CompetitorStore")
                Me.columnUPCCode = MyBase.Columns("UPCCode")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnSize = MyBase.Columns("Size")
                Me.columnUnitOfMeasure = MyBase.Columns("UnitOfMeasure")
                Me.columnPriceMultiple = MyBase.Columns("PriceMultiple")
                Me.columnPrice = MyBase.Columns("Price")
                Me.columnSaleMultiple = MyBase.Columns("SaleMultiple")
                Me.columnSale = MyBase.Columns("Sale")
                Me.columnDateChecked = MyBase.Columns("DateChecked")
                Me.columnUnit_ID = MyBase.Columns("Unit_ID")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnCompetitorImportInfoID = New Global.System.Data.DataColumn("CompetitorImportInfoID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorImportInfoID)
                Me.columnCompetitorImportSessionID = New Global.System.Data.DataColumn("CompetitorImportSessionID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorImportSessionID)
                Me.columnItem_Key = New Global.System.Data.DataColumn("Item_Key", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnItem_Key)
                Me.columnWFMIdentifier = New Global.System.Data.DataColumn("WFMIdentifier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnWFMIdentifier)
                Me.columnCompetitorID = New Global.System.Data.DataColumn("CompetitorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorID)
                Me.columnCompetitorLocationID = New Global.System.Data.DataColumn("CompetitorLocationID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorLocationID)
                Me.columnCompetitorStoreID = New Global.System.Data.DataColumn("CompetitorStoreID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorStoreID)
                Me.columnFiscalYear = New Global.System.Data.DataColumn("FiscalYear", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFiscalYear)
                Me.columnFiscalPeriod = New Global.System.Data.DataColumn("FiscalPeriod", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFiscalPeriod)
                Me.columnPeriodWeek = New Global.System.Data.DataColumn("PeriodWeek", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPeriodWeek)
                Me.columnCompetitor = New Global.System.Data.DataColumn("Competitor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitor)
                Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLocation)
                Me.columnCompetitorStore = New Global.System.Data.DataColumn("CompetitorStore", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorStore)
                Me.columnUPCCode = New Global.System.Data.DataColumn("UPCCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUPCCode)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnSize = New Global.System.Data.DataColumn("Size", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSize)
                Me.columnUnitOfMeasure = New Global.System.Data.DataColumn("UnitOfMeasure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUnitOfMeasure)
                Me.columnPriceMultiple = New Global.System.Data.DataColumn("PriceMultiple", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPriceMultiple)
                Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPrice)
                Me.columnSaleMultiple = New Global.System.Data.DataColumn("SaleMultiple", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSaleMultiple)
                Me.columnSale = New Global.System.Data.DataColumn("Sale", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSale)
                Me.columnDateChecked = New Global.System.Data.DataColumn("DateChecked", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDateChecked)
                Me.columnUnit_ID = New Global.System.Data.DataColumn("Unit_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUnit_ID)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCompetitorImportInfoID}, true))
                Me.columnCompetitorImportInfoID.AutoIncrement = true
                Me.columnCompetitorImportInfoID.AutoIncrementSeed = -1
                Me.columnCompetitorImportInfoID.AutoIncrementStep = -1
                Me.columnCompetitorImportInfoID.AllowDBNull = false
                Me.columnCompetitorImportInfoID.Unique = true
                Me.columnCompetitor.AllowDBNull = false
                Me.columnLocation.AllowDBNull = false
                Me.columnCompetitorStore.AllowDBNull = false
                Me.columnUPCCode.AllowDBNull = false
                Me.columnPriceMultiple.DefaultValue = CType(1,Byte)
                Me.columnPrice.AllowDBNull = false
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewCompetitorImportInfoRow() As CompetitorImportInfoRow
                Return CType(Me.NewRow,CompetitorImportInfoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CompetitorImportInfoRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CompetitorImportInfoRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CompetitorImportInfoRowChangedEvent) Is Nothing) Then
                    RaiseEvent CompetitorImportInfoRowChanged(Me, New CompetitorImportInfoRowChangeEvent(CType(e.Row,CompetitorImportInfoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CompetitorImportInfoRowChangingEvent) Is Nothing) Then
                    RaiseEvent CompetitorImportInfoRowChanging(Me, New CompetitorImportInfoRowChangeEvent(CType(e.Row,CompetitorImportInfoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CompetitorImportInfoRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CompetitorImportInfoRowDeleted(Me, New CompetitorImportInfoRowChangeEvent(CType(e.Row,CompetitorImportInfoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CompetitorImportInfoRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CompetitorImportInfoRowDeleting(Me, New CompetitorImportInfoRowChangeEvent(CType(e.Row,CompetitorImportInfoRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveCompetitorImportInfoRow(ByVal row As CompetitorImportInfoRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CompetitorImportInfoDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class CompetitorPriceDataTable
            Inherits Global.System.Data.TypedTableBase(Of CompetitorPriceRow)
            
            Private columnItem_Key As Global.System.Data.DataColumn
            
            Private columnCompetitorStoreID As Global.System.Data.DataColumn
            
            Private columnFiscalYear As Global.System.Data.DataColumn
            
            Private columnFiscalPeriod As Global.System.Data.DataColumn
            
            Private columnPeriodWeek As Global.System.Data.DataColumn
            
            Private columnDescription As Global.System.Data.DataColumn
            
            Private columnPriceMultiple As Global.System.Data.DataColumn
            
            Private columnPrice As Global.System.Data.DataColumn
            
            Private columnSaleMultiple As Global.System.Data.DataColumn
            
            Private columnSale As Global.System.Data.DataColumn
            
            Private columnSize As Global.System.Data.DataColumn
            
            Private columnUnit_ID As Global.System.Data.DataColumn
            
            Private columnUpdateUserID As Global.System.Data.DataColumn
            
            Private columnUpdateDateTime As Global.System.Data.DataColumn
            
            Private columnUPCCode As Global.System.Data.DataColumn
            
            Private columnCompetitorID As Global.System.Data.DataColumn
            
            Private columnCompetitorLocationID As Global.System.Data.DataColumn
            
            Private columnWFMIdentifier As Global.System.Data.DataColumn
            
            Private columnCompetitor As Global.System.Data.DataColumn
            
            Private columnLocation As Global.System.Data.DataColumn
            
            Private columnCompetitorStore As Global.System.Data.DataColumn
            
            Private columnCompetitorPriceID As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "CompetitorPrice"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Item_KeyColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnItem_Key
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorStoreIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorStoreID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FiscalYearColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFiscalYear
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FiscalPeriodColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFiscalPeriod
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PeriodWeekColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPeriodWeek
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PriceMultipleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPriceMultiple
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPrice
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SaleMultipleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSaleMultiple
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SaleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSale
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property SizeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSize
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Unit_IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnit_ID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property UpdateUserIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUpdateUserID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property UpdateDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUpdateDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property UPCCodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUPCCode
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorLocationIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorLocationID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property WFMIdentifierColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnWFMIdentifier
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitor
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLocation
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorStoreColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorStore
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorPriceIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorPriceID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As CompetitorPriceRow
                Get
                    Return CType(Me.Rows(index),CompetitorPriceRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorPriceRowChanging As CompetitorPriceRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorPriceRowChanged As CompetitorPriceRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorPriceRowDeleting As CompetitorPriceRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorPriceRowDeleted As CompetitorPriceRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddCompetitorPriceRow(ByVal row As CompetitorPriceRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddCompetitorPriceRow( _
                        ByVal Item_Key As Integer,  _
                        ByVal CompetitorStoreID As Integer,  _
                        ByVal FiscalYear As Short,  _
                        ByVal FiscalPeriod As Byte,  _
                        ByVal PeriodWeek As Byte,  _
                        ByVal Description As String,  _
                        ByVal PriceMultiple As Byte,  _
                        ByVal Price As Decimal,  _
                        ByVal SaleMultiple As Byte,  _
                        ByVal Sale As Decimal,  _
                        ByVal Size As Decimal,  _
                        ByVal parentItemUnitRowByFK_ItemUnit_CompetitorPrice As ItemUnitRow,  _
                        ByVal UpdateUserID As Integer,  _
                        ByVal UpdateDateTime As Date,  _
                        ByVal UPCCode As String,  _
                        ByVal CompetitorID As Integer,  _
                        ByVal CompetitorLocationID As Integer,  _
                        ByVal WFMIdentifier As String,  _
                        ByVal Competitor As String,  _
                        ByVal Location As String,  _
                        ByVal CompetitorStore As String) As CompetitorPriceRow
                Dim rowCompetitorPriceRow As CompetitorPriceRow = CType(Me.NewRow,CompetitorPriceRow)
                Dim columnValuesArray() As Object = New Object() {Item_Key, CompetitorStoreID, FiscalYear, FiscalPeriod, PeriodWeek, Description, PriceMultiple, Price, SaleMultiple, Sale, Size, Nothing, UpdateUserID, UpdateDateTime, UPCCode, CompetitorID, CompetitorLocationID, WFMIdentifier, Competitor, Location, CompetitorStore, Nothing}
                If (Not (parentItemUnitRowByFK_ItemUnit_CompetitorPrice) Is Nothing) Then
                    columnValuesArray(11) = parentItemUnitRowByFK_ItemUnit_CompetitorPrice(0)
                End If
                rowCompetitorPriceRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCompetitorPriceRow)
                Return rowCompetitorPriceRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByCompetitorPriceID(ByVal CompetitorPriceID As Integer) As CompetitorPriceRow
                Return CType(Me.Rows.Find(New Object() {CompetitorPriceID}),CompetitorPriceRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CompetitorPriceDataTable = CType(MyBase.Clone,CompetitorPriceDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CompetitorPriceDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnItem_Key = MyBase.Columns("Item_Key")
                Me.columnCompetitorStoreID = MyBase.Columns("CompetitorStoreID")
                Me.columnFiscalYear = MyBase.Columns("FiscalYear")
                Me.columnFiscalPeriod = MyBase.Columns("FiscalPeriod")
                Me.columnPeriodWeek = MyBase.Columns("PeriodWeek")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnPriceMultiple = MyBase.Columns("PriceMultiple")
                Me.columnPrice = MyBase.Columns("Price")
                Me.columnSaleMultiple = MyBase.Columns("SaleMultiple")
                Me.columnSale = MyBase.Columns("Sale")
                Me.columnSize = MyBase.Columns("Size")
                Me.columnUnit_ID = MyBase.Columns("Unit_ID")
                Me.columnUpdateUserID = MyBase.Columns("UpdateUserID")
                Me.columnUpdateDateTime = MyBase.Columns("UpdateDateTime")
                Me.columnUPCCode = MyBase.Columns("UPCCode")
                Me.columnCompetitorID = MyBase.Columns("CompetitorID")
                Me.columnCompetitorLocationID = MyBase.Columns("CompetitorLocationID")
                Me.columnWFMIdentifier = MyBase.Columns("WFMIdentifier")
                Me.columnCompetitor = MyBase.Columns("Competitor")
                Me.columnLocation = MyBase.Columns("Location")
                Me.columnCompetitorStore = MyBase.Columns("CompetitorStore")
                Me.columnCompetitorPriceID = MyBase.Columns("CompetitorPriceID")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnItem_Key = New Global.System.Data.DataColumn("Item_Key", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnItem_Key)
                Me.columnCompetitorStoreID = New Global.System.Data.DataColumn("CompetitorStoreID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorStoreID)
                Me.columnFiscalYear = New Global.System.Data.DataColumn("FiscalYear", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFiscalYear)
                Me.columnFiscalPeriod = New Global.System.Data.DataColumn("FiscalPeriod", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFiscalPeriod)
                Me.columnPeriodWeek = New Global.System.Data.DataColumn("PeriodWeek", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPeriodWeek)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnPriceMultiple = New Global.System.Data.DataColumn("PriceMultiple", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPriceMultiple)
                Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPrice)
                Me.columnSaleMultiple = New Global.System.Data.DataColumn("SaleMultiple", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSaleMultiple)
                Me.columnSale = New Global.System.Data.DataColumn("Sale", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSale)
                Me.columnSize = New Global.System.Data.DataColumn("Size", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSize)
                Me.columnUnit_ID = New Global.System.Data.DataColumn("Unit_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUnit_ID)
                Me.columnUpdateUserID = New Global.System.Data.DataColumn("UpdateUserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUpdateUserID)
                Me.columnUpdateDateTime = New Global.System.Data.DataColumn("UpdateDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUpdateDateTime)
                Me.columnUPCCode = New Global.System.Data.DataColumn("UPCCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUPCCode)
                Me.columnCompetitorID = New Global.System.Data.DataColumn("CompetitorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorID)
                Me.columnCompetitorLocationID = New Global.System.Data.DataColumn("CompetitorLocationID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorLocationID)
                Me.columnWFMIdentifier = New Global.System.Data.DataColumn("WFMIdentifier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnWFMIdentifier)
                Me.columnCompetitor = New Global.System.Data.DataColumn("Competitor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitor)
                Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLocation)
                Me.columnCompetitorStore = New Global.System.Data.DataColumn("CompetitorStore", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorStore)
                Me.columnCompetitorPriceID = New Global.System.Data.DataColumn("CompetitorPriceID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorPriceID)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CompetitorPriceKey1", New Global.System.Data.DataColumn() {Me.columnCompetitorPriceID}, true))
                Me.columnDescription.MaxLength = 250
                Me.columnPriceMultiple.DefaultValue = CType(1,Byte)
                Me.columnUpdateUserID.AllowDBNull = false
                Me.columnUpdateDateTime.AllowDBNull = false
                Me.columnUPCCode.MaxLength = 50
                Me.columnWFMIdentifier.MaxLength = 13
                Me.columnCompetitor.MaxLength = 50
                Me.columnLocation.MaxLength = 50
                Me.columnCompetitorStore.MaxLength = 50
                Me.columnCompetitorPriceID.AutoIncrement = true
                Me.columnCompetitorPriceID.AllowDBNull = false
                Me.columnCompetitorPriceID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewCompetitorPriceRow() As CompetitorPriceRow
                Return CType(Me.NewRow,CompetitorPriceRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CompetitorPriceRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CompetitorPriceRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CompetitorPriceRowChangedEvent) Is Nothing) Then
                    RaiseEvent CompetitorPriceRowChanged(Me, New CompetitorPriceRowChangeEvent(CType(e.Row,CompetitorPriceRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CompetitorPriceRowChangingEvent) Is Nothing) Then
                    RaiseEvent CompetitorPriceRowChanging(Me, New CompetitorPriceRowChangeEvent(CType(e.Row,CompetitorPriceRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CompetitorPriceRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CompetitorPriceRowDeleted(Me, New CompetitorPriceRowChangeEvent(CType(e.Row,CompetitorPriceRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CompetitorPriceRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CompetitorPriceRowDeleting(Me, New CompetitorPriceRowChangeEvent(CType(e.Row,CompetitorPriceRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveCompetitorPriceRow(ByVal row As CompetitorPriceRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CompetitorPriceDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class CompetitorImportSessionDataTable
            Inherits Global.System.Data.TypedTableBase(Of CompetitorImportSessionRow)
            
            Private columnCompetitorImportSessionID As Global.System.Data.DataColumn
            
            Private columnUser_ID As Global.System.Data.DataColumn
            
            Private columnStartDateTime As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "CompetitorImportSession"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorImportSessionIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorImportSessionID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property User_IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUser_ID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property StartDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStartDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As CompetitorImportSessionRow
                Get
                    Return CType(Me.Rows(index),CompetitorImportSessionRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorImportSessionRowChanging As CompetitorImportSessionRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorImportSessionRowChanged As CompetitorImportSessionRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorImportSessionRowDeleting As CompetitorImportSessionRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorImportSessionRowDeleted As CompetitorImportSessionRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddCompetitorImportSessionRow(ByVal row As CompetitorImportSessionRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddCompetitorImportSessionRow(ByVal User_ID As Integer, ByVal StartDateTime As Date) As CompetitorImportSessionRow
                Dim rowCompetitorImportSessionRow As CompetitorImportSessionRow = CType(Me.NewRow,CompetitorImportSessionRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, User_ID, StartDateTime}
                rowCompetitorImportSessionRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCompetitorImportSessionRow)
                Return rowCompetitorImportSessionRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByCompetitorImportSessionID(ByVal CompetitorImportSessionID As Integer) As CompetitorImportSessionRow
                Return CType(Me.Rows.Find(New Object() {CompetitorImportSessionID}),CompetitorImportSessionRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CompetitorImportSessionDataTable = CType(MyBase.Clone,CompetitorImportSessionDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CompetitorImportSessionDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnCompetitorImportSessionID = MyBase.Columns("CompetitorImportSessionID")
                Me.columnUser_ID = MyBase.Columns("User_ID")
                Me.columnStartDateTime = MyBase.Columns("StartDateTime")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnCompetitorImportSessionID = New Global.System.Data.DataColumn("CompetitorImportSessionID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorImportSessionID)
                Me.columnUser_ID = New Global.System.Data.DataColumn("User_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUser_ID)
                Me.columnStartDateTime = New Global.System.Data.DataColumn("StartDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStartDateTime)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCompetitorImportSessionID}, true))
                Me.columnCompetitorImportSessionID.AutoIncrement = true
                Me.columnCompetitorImportSessionID.AllowDBNull = false
                Me.columnCompetitorImportSessionID.ReadOnly = true
                Me.columnCompetitorImportSessionID.Unique = true
                Me.columnUser_ID.AllowDBNull = false
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewCompetitorImportSessionRow() As CompetitorImportSessionRow
                Return CType(Me.NewRow,CompetitorImportSessionRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CompetitorImportSessionRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CompetitorImportSessionRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CompetitorImportSessionRowChangedEvent) Is Nothing) Then
                    RaiseEvent CompetitorImportSessionRowChanged(Me, New CompetitorImportSessionRowChangeEvent(CType(e.Row,CompetitorImportSessionRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CompetitorImportSessionRowChangingEvent) Is Nothing) Then
                    RaiseEvent CompetitorImportSessionRowChanging(Me, New CompetitorImportSessionRowChangeEvent(CType(e.Row,CompetitorImportSessionRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CompetitorImportSessionRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CompetitorImportSessionRowDeleted(Me, New CompetitorImportSessionRowChangeEvent(CType(e.Row,CompetitorImportSessionRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CompetitorImportSessionRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CompetitorImportSessionRowDeleting(Me, New CompetitorImportSessionRowChangeEvent(CType(e.Row,CompetitorImportSessionRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveCompetitorImportSessionRow(ByVal row As CompetitorImportSessionRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CompetitorImportSessionDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class FiscalWeekDataTable
            Inherits Global.System.Data.TypedTableBase(Of FiscalWeekRow)
            
            Private columnFiscalYear As Global.System.Data.DataColumn
            
            Private columnFiscalPeriod As Global.System.Data.DataColumn
            
            Private columnPeriodWeek As Global.System.Data.DataColumn
            
            Private columnYearWeek As Global.System.Data.DataColumn
            
            Private columnFiscalWeekDescription As Global.System.Data.DataColumn
            
            Private columnStartDate As Global.System.Data.DataColumn
            
            Private columnEndDate As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "FiscalWeek"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FiscalYearColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFiscalYear
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FiscalPeriodColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFiscalPeriod
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PeriodWeekColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPeriodWeek
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property YearWeekColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnYearWeek
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property FiscalWeekDescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFiscalWeekDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStartDate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property EndDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEndDate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As FiscalWeekRow
                Get
                    Return CType(Me.Rows(index),FiscalWeekRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FiscalWeekRowChanging As FiscalWeekRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FiscalWeekRowChanged As FiscalWeekRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FiscalWeekRowDeleting As FiscalWeekRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event FiscalWeekRowDeleted As FiscalWeekRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddFiscalWeekRow(ByVal row As FiscalWeekRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddFiscalWeekRow(ByVal FiscalYear As Short, ByVal FiscalPeriod As Byte, ByVal PeriodWeek As Byte, ByVal YearWeek As Byte, ByVal FiscalWeekDescription As String, ByVal StartDate As Date, ByVal EndDate As Date) As FiscalWeekRow
                Dim rowFiscalWeekRow As FiscalWeekRow = CType(Me.NewRow,FiscalWeekRow)
                Dim columnValuesArray() As Object = New Object() {FiscalYear, FiscalPeriod, PeriodWeek, YearWeek, FiscalWeekDescription, StartDate, EndDate}
                rowFiscalWeekRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowFiscalWeekRow)
                Return rowFiscalWeekRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByFiscalYearFiscalPeriodPeriodWeek(ByVal FiscalYear As Short, ByVal FiscalPeriod As Byte, ByVal PeriodWeek As Byte) As FiscalWeekRow
                Return CType(Me.Rows.Find(New Object() {FiscalYear, FiscalPeriod, PeriodWeek}),FiscalWeekRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As FiscalWeekDataTable = CType(MyBase.Clone,FiscalWeekDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New FiscalWeekDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnFiscalYear = MyBase.Columns("FiscalYear")
                Me.columnFiscalPeriod = MyBase.Columns("FiscalPeriod")
                Me.columnPeriodWeek = MyBase.Columns("PeriodWeek")
                Me.columnYearWeek = MyBase.Columns("YearWeek")
                Me.columnFiscalWeekDescription = MyBase.Columns("FiscalWeekDescription")
                Me.columnStartDate = MyBase.Columns("StartDate")
                Me.columnEndDate = MyBase.Columns("EndDate")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnFiscalYear = New Global.System.Data.DataColumn("FiscalYear", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFiscalYear)
                Me.columnFiscalPeriod = New Global.System.Data.DataColumn("FiscalPeriod", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFiscalPeriod)
                Me.columnPeriodWeek = New Global.System.Data.DataColumn("PeriodWeek", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPeriodWeek)
                Me.columnYearWeek = New Global.System.Data.DataColumn("YearWeek", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnYearWeek)
                Me.columnFiscalWeekDescription = New Global.System.Data.DataColumn("FiscalWeekDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFiscalWeekDescription)
                Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStartDate)
                Me.columnEndDate = New Global.System.Data.DataColumn("EndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEndDate)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFiscalYear, Me.columnFiscalPeriod, Me.columnPeriodWeek}, true))
                Me.columnFiscalYear.AllowDBNull = false
                Me.columnFiscalPeriod.AllowDBNull = false
                Me.columnPeriodWeek.AllowDBNull = false
                Me.columnYearWeek.AllowDBNull = false
                Me.columnFiscalWeekDescription.AllowDBNull = false
                Me.columnFiscalWeekDescription.MaxLength = 50
                Me.columnStartDate.AllowDBNull = false
                Me.columnEndDate.AllowDBNull = false
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewFiscalWeekRow() As FiscalWeekRow
                Return CType(Me.NewRow,FiscalWeekRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New FiscalWeekRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(FiscalWeekRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.FiscalWeekRowChangedEvent) Is Nothing) Then
                    RaiseEvent FiscalWeekRowChanged(Me, New FiscalWeekRowChangeEvent(CType(e.Row,FiscalWeekRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.FiscalWeekRowChangingEvent) Is Nothing) Then
                    RaiseEvent FiscalWeekRowChanging(Me, New FiscalWeekRowChangeEvent(CType(e.Row,FiscalWeekRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.FiscalWeekRowDeletedEvent) Is Nothing) Then
                    RaiseEvent FiscalWeekRowDeleted(Me, New FiscalWeekRowChangeEvent(CType(e.Row,FiscalWeekRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.FiscalWeekRowDeletingEvent) Is Nothing) Then
                    RaiseEvent FiscalWeekRowDeleting(Me, New FiscalWeekRowChangeEvent(CType(e.Row,FiscalWeekRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveFiscalWeekRow(ByVal row As FiscalWeekRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "FiscalWeekDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class CompetitorDataTable
            Inherits Global.System.Data.TypedTableBase(Of CompetitorRow)
            
            Private columnCompetitorID As Global.System.Data.DataColumn
            
            Private columnName As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Competitor"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As CompetitorRow
                Get
                    Return CType(Me.Rows(index),CompetitorRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorRowChanging As CompetitorRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorRowChanged As CompetitorRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorRowDeleting As CompetitorRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorRowDeleted As CompetitorRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddCompetitorRow(ByVal row As CompetitorRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddCompetitorRow(ByVal Name As String) As CompetitorRow
                Dim rowCompetitorRow As CompetitorRow = CType(Me.NewRow,CompetitorRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Name}
                rowCompetitorRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCompetitorRow)
                Return rowCompetitorRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByCompetitorID(ByVal CompetitorID As Integer) As CompetitorRow
                Return CType(Me.Rows.Find(New Object() {CompetitorID}),CompetitorRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CompetitorDataTable = CType(MyBase.Clone,CompetitorDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CompetitorDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnCompetitorID = MyBase.Columns("CompetitorID")
                Me.columnName = MyBase.Columns("Name")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnCompetitorID = New Global.System.Data.DataColumn("CompetitorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorID)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCompetitorID}, true))
                Me.columnCompetitorID.AutoIncrement = true
                Me.columnCompetitorID.AllowDBNull = false
                Me.columnCompetitorID.ReadOnly = true
                Me.columnCompetitorID.Unique = true
                Me.columnName.AllowDBNull = false
                Me.columnName.MaxLength = 50
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewCompetitorRow() As CompetitorRow
                Return CType(Me.NewRow,CompetitorRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CompetitorRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CompetitorRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CompetitorRowChangedEvent) Is Nothing) Then
                    RaiseEvent CompetitorRowChanged(Me, New CompetitorRowChangeEvent(CType(e.Row,CompetitorRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CompetitorRowChangingEvent) Is Nothing) Then
                    RaiseEvent CompetitorRowChanging(Me, New CompetitorRowChangeEvent(CType(e.Row,CompetitorRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CompetitorRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CompetitorRowDeleted(Me, New CompetitorRowChangeEvent(CType(e.Row,CompetitorRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CompetitorRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CompetitorRowDeleting(Me, New CompetitorRowChangeEvent(CType(e.Row,CompetitorRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveCompetitorRow(ByVal row As CompetitorRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CompetitorDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class CompetitorLocationDataTable
            Inherits Global.System.Data.TypedTableBase(Of CompetitorLocationRow)
            
            Private columnCompetitorLocationID As Global.System.Data.DataColumn
            
            Private columnName As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "CompetitorLocation"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorLocationIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorLocationID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As CompetitorLocationRow
                Get
                    Return CType(Me.Rows(index),CompetitorLocationRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorLocationRowChanging As CompetitorLocationRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorLocationRowChanged As CompetitorLocationRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorLocationRowDeleting As CompetitorLocationRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorLocationRowDeleted As CompetitorLocationRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddCompetitorLocationRow(ByVal row As CompetitorLocationRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddCompetitorLocationRow(ByVal Name As String) As CompetitorLocationRow
                Dim rowCompetitorLocationRow As CompetitorLocationRow = CType(Me.NewRow,CompetitorLocationRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Name}
                rowCompetitorLocationRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCompetitorLocationRow)
                Return rowCompetitorLocationRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByCompetitorLocationID(ByVal CompetitorLocationID As Integer) As CompetitorLocationRow
                Return CType(Me.Rows.Find(New Object() {CompetitorLocationID}),CompetitorLocationRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CompetitorLocationDataTable = CType(MyBase.Clone,CompetitorLocationDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CompetitorLocationDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnCompetitorLocationID = MyBase.Columns("CompetitorLocationID")
                Me.columnName = MyBase.Columns("Name")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnCompetitorLocationID = New Global.System.Data.DataColumn("CompetitorLocationID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorLocationID)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCompetitorLocationID}, true))
                Me.columnCompetitorLocationID.AutoIncrement = true
                Me.columnCompetitorLocationID.AllowDBNull = false
                Me.columnCompetitorLocationID.ReadOnly = true
                Me.columnCompetitorLocationID.Unique = true
                Me.columnName.AllowDBNull = false
                Me.columnName.MaxLength = 50
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewCompetitorLocationRow() As CompetitorLocationRow
                Return CType(Me.NewRow,CompetitorLocationRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CompetitorLocationRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CompetitorLocationRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CompetitorLocationRowChangedEvent) Is Nothing) Then
                    RaiseEvent CompetitorLocationRowChanged(Me, New CompetitorLocationRowChangeEvent(CType(e.Row,CompetitorLocationRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CompetitorLocationRowChangingEvent) Is Nothing) Then
                    RaiseEvent CompetitorLocationRowChanging(Me, New CompetitorLocationRowChangeEvent(CType(e.Row,CompetitorLocationRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CompetitorLocationRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CompetitorLocationRowDeleted(Me, New CompetitorLocationRowChangeEvent(CType(e.Row,CompetitorLocationRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CompetitorLocationRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CompetitorLocationRowDeleting(Me, New CompetitorLocationRowChangeEvent(CType(e.Row,CompetitorLocationRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveCompetitorLocationRow(ByVal row As CompetitorLocationRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CompetitorLocationDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class CompetitorStoreDataTable
            Inherits Global.System.Data.TypedTableBase(Of CompetitorStoreRow)
            
            Private columnCompetitorStoreID As Global.System.Data.DataColumn
            
            Private columnCompetitorID As Global.System.Data.DataColumn
            
            Private columnCompetitorLocationID As Global.System.Data.DataColumn
            
            Private columnName As Global.System.Data.DataColumn
            
            Private columnUpdateUserID As Global.System.Data.DataColumn
            
            Private columnUpdateDateTime As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "CompetitorStore"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorStoreIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorStoreID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorLocationIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorLocationID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property UpdateUserIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUpdateUserID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property UpdateDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUpdateDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As CompetitorStoreRow
                Get
                    Return CType(Me.Rows(index),CompetitorStoreRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorStoreRowChanging As CompetitorStoreRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorStoreRowChanged As CompetitorStoreRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorStoreRowDeleting As CompetitorStoreRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorStoreRowDeleted As CompetitorStoreRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddCompetitorStoreRow(ByVal row As CompetitorStoreRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddCompetitorStoreRow(ByVal parentCompetitorRowByFK_CompetitorStore_Competitor As CompetitorRow, ByVal parentCompetitorLocationRowByFK_CompetitorStore_CompetitorLocation As CompetitorLocationRow, ByVal Name As String, ByVal UpdateUserID As Integer, ByVal UpdateDateTime As Date) As CompetitorStoreRow
                Dim rowCompetitorStoreRow As CompetitorStoreRow = CType(Me.NewRow,CompetitorStoreRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, Name, UpdateUserID, UpdateDateTime}
                If (Not (parentCompetitorRowByFK_CompetitorStore_Competitor) Is Nothing) Then
                    columnValuesArray(1) = parentCompetitorRowByFK_CompetitorStore_Competitor(0)
                End If
                If (Not (parentCompetitorLocationRowByFK_CompetitorStore_CompetitorLocation) Is Nothing) Then
                    columnValuesArray(2) = parentCompetitorLocationRowByFK_CompetitorStore_CompetitorLocation(0)
                End If
                rowCompetitorStoreRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCompetitorStoreRow)
                Return rowCompetitorStoreRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByCompetitorStoreID(ByVal CompetitorStoreID As Integer) As CompetitorStoreRow
                Return CType(Me.Rows.Find(New Object() {CompetitorStoreID}),CompetitorStoreRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CompetitorStoreDataTable = CType(MyBase.Clone,CompetitorStoreDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CompetitorStoreDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnCompetitorStoreID = MyBase.Columns("CompetitorStoreID")
                Me.columnCompetitorID = MyBase.Columns("CompetitorID")
                Me.columnCompetitorLocationID = MyBase.Columns("CompetitorLocationID")
                Me.columnName = MyBase.Columns("Name")
                Me.columnUpdateUserID = MyBase.Columns("UpdateUserID")
                Me.columnUpdateDateTime = MyBase.Columns("UpdateDateTime")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnCompetitorStoreID = New Global.System.Data.DataColumn("CompetitorStoreID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorStoreID)
                Me.columnCompetitorID = New Global.System.Data.DataColumn("CompetitorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorID)
                Me.columnCompetitorLocationID = New Global.System.Data.DataColumn("CompetitorLocationID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorLocationID)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.columnUpdateUserID = New Global.System.Data.DataColumn("UpdateUserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUpdateUserID)
                Me.columnUpdateDateTime = New Global.System.Data.DataColumn("UpdateDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUpdateDateTime)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCompetitorStoreID}, true))
                Me.columnCompetitorStoreID.AutoIncrement = true
                Me.columnCompetitorStoreID.AllowDBNull = false
                Me.columnCompetitorStoreID.ReadOnly = true
                Me.columnCompetitorStoreID.Unique = true
                Me.columnCompetitorID.AllowDBNull = false
                Me.columnCompetitorLocationID.AllowDBNull = false
                Me.columnName.AllowDBNull = false
                Me.columnName.MaxLength = 50
                Me.columnUpdateUserID.AllowDBNull = false
                Me.columnUpdateDateTime.AllowDBNull = false
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewCompetitorStoreRow() As CompetitorStoreRow
                Return CType(Me.NewRow,CompetitorStoreRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CompetitorStoreRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CompetitorStoreRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CompetitorStoreRowChangedEvent) Is Nothing) Then
                    RaiseEvent CompetitorStoreRowChanged(Me, New CompetitorStoreRowChangeEvent(CType(e.Row,CompetitorStoreRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CompetitorStoreRowChangingEvent) Is Nothing) Then
                    RaiseEvent CompetitorStoreRowChanging(Me, New CompetitorStoreRowChangeEvent(CType(e.Row,CompetitorStoreRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CompetitorStoreRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CompetitorStoreRowDeleted(Me, New CompetitorStoreRowChangeEvent(CType(e.Row,CompetitorStoreRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CompetitorStoreRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CompetitorStoreRowDeleting(Me, New CompetitorStoreRowChangeEvent(CType(e.Row,CompetitorStoreRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveCompetitorStoreRow(ByVal row As CompetitorStoreRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CompetitorStoreDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class CompetitorStoreIdentifierDataTable
            Inherits Global.System.Data.TypedTableBase(Of CompetitorStoreIdentifierRow)
            
            Private columnCompetitorStoreIdentifierID As Global.System.Data.DataColumn
            
            Private columnCompetitorStoreID As Global.System.Data.DataColumn
            
            Private columnIdentifier As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "CompetitorStoreIdentifier"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorStoreIdentifierIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorStoreIdentifierID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorStoreIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorStoreID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property IdentifierColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIdentifier
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As CompetitorStoreIdentifierRow
                Get
                    Return CType(Me.Rows(index),CompetitorStoreIdentifierRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorStoreIdentifierRowChanging As CompetitorStoreIdentifierRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorStoreIdentifierRowChanged As CompetitorStoreIdentifierRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorStoreIdentifierRowDeleting As CompetitorStoreIdentifierRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event CompetitorStoreIdentifierRowDeleted As CompetitorStoreIdentifierRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddCompetitorStoreIdentifierRow(ByVal row As CompetitorStoreIdentifierRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddCompetitorStoreIdentifierRow(ByVal CompetitorStoreID As Integer, ByVal Identifier As String) As CompetitorStoreIdentifierRow
                Dim rowCompetitorStoreIdentifierRow As CompetitorStoreIdentifierRow = CType(Me.NewRow,CompetitorStoreIdentifierRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, CompetitorStoreID, Identifier}
                rowCompetitorStoreIdentifierRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowCompetitorStoreIdentifierRow)
                Return rowCompetitorStoreIdentifierRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByCompetitorStoreIdentifierID(ByVal CompetitorStoreIdentifierID As Integer) As CompetitorStoreIdentifierRow
                Return CType(Me.Rows.Find(New Object() {CompetitorStoreIdentifierID}),CompetitorStoreIdentifierRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As CompetitorStoreIdentifierDataTable = CType(MyBase.Clone,CompetitorStoreIdentifierDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New CompetitorStoreIdentifierDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnCompetitorStoreIdentifierID = MyBase.Columns("CompetitorStoreIdentifierID")
                Me.columnCompetitorStoreID = MyBase.Columns("CompetitorStoreID")
                Me.columnIdentifier = MyBase.Columns("Identifier")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnCompetitorStoreIdentifierID = New Global.System.Data.DataColumn("CompetitorStoreIdentifierID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorStoreIdentifierID)
                Me.columnCompetitorStoreID = New Global.System.Data.DataColumn("CompetitorStoreID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorStoreID)
                Me.columnIdentifier = New Global.System.Data.DataColumn("Identifier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIdentifier)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCompetitorStoreIdentifierID}, true))
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("UX_CompetitorStoreIdentifier", New Global.System.Data.DataColumn() {Me.columnCompetitorStoreID, Me.columnIdentifier}, false))
                Me.columnCompetitorStoreIdentifierID.AutoIncrement = true
                Me.columnCompetitorStoreIdentifierID.AllowDBNull = false
                Me.columnCompetitorStoreIdentifierID.ReadOnly = true
                Me.columnCompetitorStoreIdentifierID.Unique = true
                Me.columnCompetitorStoreID.AllowDBNull = false
                Me.columnIdentifier.AllowDBNull = false
                Me.columnIdentifier.MaxLength = 50
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewCompetitorStoreIdentifierRow() As CompetitorStoreIdentifierRow
                Return CType(Me.NewRow,CompetitorStoreIdentifierRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New CompetitorStoreIdentifierRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(CompetitorStoreIdentifierRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.CompetitorStoreIdentifierRowChangedEvent) Is Nothing) Then
                    RaiseEvent CompetitorStoreIdentifierRowChanged(Me, New CompetitorStoreIdentifierRowChangeEvent(CType(e.Row,CompetitorStoreIdentifierRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.CompetitorStoreIdentifierRowChangingEvent) Is Nothing) Then
                    RaiseEvent CompetitorStoreIdentifierRowChanging(Me, New CompetitorStoreIdentifierRowChangeEvent(CType(e.Row,CompetitorStoreIdentifierRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.CompetitorStoreIdentifierRowDeletedEvent) Is Nothing) Then
                    RaiseEvent CompetitorStoreIdentifierRowDeleted(Me, New CompetitorStoreIdentifierRowChangeEvent(CType(e.Row,CompetitorStoreIdentifierRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.CompetitorStoreIdentifierRowDeletingEvent) Is Nothing) Then
                    RaiseEvent CompetitorStoreIdentifierRowDeleting(Me, New CompetitorStoreIdentifierRowChangeEvent(CType(e.Row,CompetitorStoreIdentifierRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveCompetitorStoreIdentifierRow(ByVal row As CompetitorStoreIdentifierRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "CompetitorStoreIdentifierDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class StoreCompetitorStoreDataTable
            Inherits Global.System.Data.TypedTableBase(Of StoreCompetitorStoreRow)
            
            Private columnStore_No As Global.System.Data.DataColumn
            
            Private columnCompetitorStoreID As Global.System.Data.DataColumn
            
            Private columnPriority As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "StoreCompetitorStore"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Store_NoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStore_No
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property CompetitorStoreIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompetitorStoreID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property PriorityColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPriority
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As StoreCompetitorStoreRow
                Get
                    Return CType(Me.Rows(index),StoreCompetitorStoreRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event StoreCompetitorStoreRowChanging As StoreCompetitorStoreRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event StoreCompetitorStoreRowChanged As StoreCompetitorStoreRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event StoreCompetitorStoreRowDeleting As StoreCompetitorStoreRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event StoreCompetitorStoreRowDeleted As StoreCompetitorStoreRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddStoreCompetitorStoreRow(ByVal row As StoreCompetitorStoreRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddStoreCompetitorStoreRow(ByVal Store_No As Integer, ByVal parentCompetitorStoreRowByFK_CompetitorStore_StoreCompetitorStore As CompetitorStoreRow, ByVal Priority As Byte) As StoreCompetitorStoreRow
                Dim rowStoreCompetitorStoreRow As StoreCompetitorStoreRow = CType(Me.NewRow,StoreCompetitorStoreRow)
                Dim columnValuesArray() As Object = New Object() {Store_No, Nothing, Priority}
                If (Not (parentCompetitorStoreRowByFK_CompetitorStore_StoreCompetitorStore) Is Nothing) Then
                    columnValuesArray(1) = parentCompetitorStoreRowByFK_CompetitorStore_StoreCompetitorStore(0)
                End If
                rowStoreCompetitorStoreRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowStoreCompetitorStoreRow)
                Return rowStoreCompetitorStoreRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByStore_NoCompetitorStoreID(ByVal Store_No As Integer, ByVal CompetitorStoreID As Integer) As StoreCompetitorStoreRow
                Return CType(Me.Rows.Find(New Object() {Store_No, CompetitorStoreID}),StoreCompetitorStoreRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As StoreCompetitorStoreDataTable = CType(MyBase.Clone,StoreCompetitorStoreDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New StoreCompetitorStoreDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnStore_No = MyBase.Columns("Store_No")
                Me.columnCompetitorStoreID = MyBase.Columns("CompetitorStoreID")
                Me.columnPriority = MyBase.Columns("Priority")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnStore_No = New Global.System.Data.DataColumn("Store_No", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStore_No)
                Me.columnCompetitorStoreID = New Global.System.Data.DataColumn("CompetitorStoreID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompetitorStoreID)
                Me.columnPriority = New Global.System.Data.DataColumn("Priority", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPriority)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_StoreCompetitorStore", New Global.System.Data.DataColumn() {Me.columnStore_No, Me.columnCompetitorStoreID}, true))
                Me.columnStore_No.AllowDBNull = false
                Me.columnCompetitorStoreID.AllowDBNull = false
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewStoreCompetitorStoreRow() As StoreCompetitorStoreRow
                Return CType(Me.NewRow,StoreCompetitorStoreRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New StoreCompetitorStoreRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(StoreCompetitorStoreRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.StoreCompetitorStoreRowChangedEvent) Is Nothing) Then
                    RaiseEvent StoreCompetitorStoreRowChanged(Me, New StoreCompetitorStoreRowChangeEvent(CType(e.Row,StoreCompetitorStoreRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.StoreCompetitorStoreRowChangingEvent) Is Nothing) Then
                    RaiseEvent StoreCompetitorStoreRowChanging(Me, New StoreCompetitorStoreRowChangeEvent(CType(e.Row,StoreCompetitorStoreRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.StoreCompetitorStoreRowDeletedEvent) Is Nothing) Then
                    RaiseEvent StoreCompetitorStoreRowDeleted(Me, New StoreCompetitorStoreRowChangeEvent(CType(e.Row,StoreCompetitorStoreRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.StoreCompetitorStoreRowDeletingEvent) Is Nothing) Then
                    RaiseEvent StoreCompetitorStoreRowDeleting(Me, New StoreCompetitorStoreRowChangeEvent(CType(e.Row,StoreCompetitorStoreRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveStoreCompetitorStoreRow(ByVal row As StoreCompetitorStoreRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "StoreCompetitorStoreDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ItemUnitDataTable
            Inherits Global.System.Data.TypedTableBase(Of ItemUnitRow)
            
            Private columnUnit_ID As Global.System.Data.DataColumn
            
            Private columnUnit_Name As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ItemUnit"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Unit_IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnit_ID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Unit_NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUnit_Name
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ItemUnitRow
                Get
                    Return CType(Me.Rows(index),ItemUnitRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ItemUnitRowChanging As ItemUnitRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ItemUnitRowChanged As ItemUnitRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ItemUnitRowDeleting As ItemUnitRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Event ItemUnitRowDeleted As ItemUnitRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Sub AddItemUnitRow(ByVal row As ItemUnitRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overloads Function AddItemUnitRow(ByVal Unit_ID As Integer, ByVal Unit_Name As String) As ItemUnitRow
                Dim rowItemUnitRow As ItemUnitRow = CType(Me.NewRow,ItemUnitRow)
                Dim columnValuesArray() As Object = New Object() {Unit_ID, Unit_Name}
                rowItemUnitRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowItemUnitRow)
                Return rowItemUnitRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function FindByUnit_ID(ByVal Unit_ID As Integer) As ItemUnitRow
                Return CType(Me.Rows.Find(New Object() {Unit_ID}),ItemUnitRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ItemUnitDataTable = CType(MyBase.Clone,ItemUnitDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ItemUnitDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnUnit_ID = MyBase.Columns("Unit_ID")
                Me.columnUnit_Name = MyBase.Columns("Unit_Name")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Sub InitClass()
                Me.columnUnit_ID = New Global.System.Data.DataColumn("Unit_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUnit_ID)
                Me.columnUnit_Name = New Global.System.Data.DataColumn("Unit_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUnit_Name)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUnit_ID}, true))
                Me.columnUnit_ID.AllowDBNull = false
                Me.columnUnit_ID.Unique = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function NewItemUnitRow() As ItemUnitRow
                Return CType(Me.NewRow,ItemUnitRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ItemUnitRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ItemUnitRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ItemUnitRowChangedEvent) Is Nothing) Then
                    RaiseEvent ItemUnitRowChanged(Me, New ItemUnitRowChangeEvent(CType(e.Row,ItemUnitRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ItemUnitRowChangingEvent) Is Nothing) Then
                    RaiseEvent ItemUnitRowChanging(Me, New ItemUnitRowChangeEvent(CType(e.Row,ItemUnitRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ItemUnitRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ItemUnitRowDeleted(Me, New ItemUnitRowChangeEvent(CType(e.Row,ItemUnitRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ItemUnitRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ItemUnitRowDeleting(Me, New ItemUnitRowChangeEvent(CType(e.Row,ItemUnitRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub RemoveItemUnitRow(ByVal row As ItemUnitRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As CompetitorStoreDataSet = New CompetitorStoreDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ItemUnitDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class CompetitorImportInfoRow
            Inherits Global.System.Data.DataRow
            
            Private tableCompetitorImportInfo As CompetitorImportInfoDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCompetitorImportInfo = CType(Me.Table,CompetitorImportInfoDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorImportInfoID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorImportInfo.CompetitorImportInfoIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.CompetitorImportInfoIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorImportSessionID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.CompetitorImportSessionIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CompetitorImportSessionID' in table 'CompetitorImportInfo' "& _ 
                                "is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.CompetitorImportSessionIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Item_Key() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.Item_KeyColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Key' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.Item_KeyColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property WFMIdentifier() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.WFMIdentifierColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'WFMIdentifier' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.WFMIdentifierColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.CompetitorIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CompetitorID' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.CompetitorIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorLocationID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.CompetitorLocationIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CompetitorLocationID' in table 'CompetitorImportInfo' is DB"& _ 
                                "Null.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.CompetitorLocationIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorStoreID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.CompetitorStoreIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CompetitorStoreID' in table 'CompetitorImportInfo' is DBNul"& _ 
                                "l.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.CompetitorStoreIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FiscalYear() As Short
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.FiscalYearColumn),Short)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FiscalYear' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.FiscalYearColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FiscalPeriod() As Byte
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.FiscalPeriodColumn),Byte)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FiscalPeriod' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.FiscalPeriodColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property PeriodWeek() As Byte
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.PeriodWeekColumn),Byte)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'PeriodWeek' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.PeriodWeekColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Competitor() As String
                Get
                    Return CType(Me(Me.tableCompetitorImportInfo.CompetitorColumn),String)
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.CompetitorColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Location() As String
                Get
                    Return CType(Me(Me.tableCompetitorImportInfo.LocationColumn),String)
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.LocationColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorStore() As String
                Get
                    Return CType(Me(Me.tableCompetitorImportInfo.CompetitorStoreColumn),String)
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.CompetitorStoreColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property UPCCode() As String
                Get
                    Return CType(Me(Me.tableCompetitorImportInfo.UPCCodeColumn),String)
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.UPCCodeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Description() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.DescriptionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.DescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Size() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.SizeColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Size' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.SizeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property UnitOfMeasure() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.UnitOfMeasureColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'UnitOfMeasure' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.UnitOfMeasureColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property PriceMultiple() As Byte
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.PriceMultipleColumn),Byte)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'PriceMultiple' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.PriceMultipleColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Price() As Decimal
                Get
                    Return CType(Me(Me.tableCompetitorImportInfo.PriceColumn),Decimal)
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.PriceColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SaleMultiple() As Byte
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.SaleMultipleColumn),Byte)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SaleMultiple' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.SaleMultipleColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Sale() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.SaleColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Sale' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.SaleColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property DateChecked() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.DateCheckedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DateChecked' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.DateCheckedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Unit_ID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportInfo.Unit_IDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Unit_ID' in table 'CompetitorImportInfo' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportInfo.Unit_IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorImportSessionRow() As CompetitorImportSessionRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CompetitorImportSession_CompetitorImportInfo")),CompetitorImportSessionRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_CompetitorImportSession_CompetitorImportInfo"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FiscalWeekRowParent() As FiscalWeekRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FiscalWeek_CompetitorImportInfo")),FiscalWeekRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_FiscalWeek_CompetitorImportInfo"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ItemUnitRow() As ItemUnitRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CompetitorImportInfo_ItemUnit")),ItemUnitRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_CompetitorImportInfo_ItemUnit"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCompetitorImportSessionIDNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.CompetitorImportSessionIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCompetitorImportSessionIDNull()
                Me(Me.tableCompetitorImportInfo.CompetitorImportSessionIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsItem_KeyNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.Item_KeyColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetItem_KeyNull()
                Me(Me.tableCompetitorImportInfo.Item_KeyColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsWFMIdentifierNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.WFMIdentifierColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetWFMIdentifierNull()
                Me(Me.tableCompetitorImportInfo.WFMIdentifierColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCompetitorIDNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.CompetitorIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCompetitorIDNull()
                Me(Me.tableCompetitorImportInfo.CompetitorIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCompetitorLocationIDNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.CompetitorLocationIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCompetitorLocationIDNull()
                Me(Me.tableCompetitorImportInfo.CompetitorLocationIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCompetitorStoreIDNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.CompetitorStoreIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCompetitorStoreIDNull()
                Me(Me.tableCompetitorImportInfo.CompetitorStoreIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFiscalYearNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.FiscalYearColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFiscalYearNull()
                Me(Me.tableCompetitorImportInfo.FiscalYearColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFiscalPeriodNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.FiscalPeriodColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFiscalPeriodNull()
                Me(Me.tableCompetitorImportInfo.FiscalPeriodColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPeriodWeekNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.PeriodWeekColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPeriodWeekNull()
                Me(Me.tableCompetitorImportInfo.PeriodWeekColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.DescriptionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetDescriptionNull()
                Me(Me.tableCompetitorImportInfo.DescriptionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSizeNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.SizeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSizeNull()
                Me(Me.tableCompetitorImportInfo.SizeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsUnitOfMeasureNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.UnitOfMeasureColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetUnitOfMeasureNull()
                Me(Me.tableCompetitorImportInfo.UnitOfMeasureColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPriceMultipleNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.PriceMultipleColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPriceMultipleNull()
                Me(Me.tableCompetitorImportInfo.PriceMultipleColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSaleMultipleNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.SaleMultipleColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSaleMultipleNull()
                Me(Me.tableCompetitorImportInfo.SaleMultipleColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSaleNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.SaleColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSaleNull()
                Me(Me.tableCompetitorImportInfo.SaleColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsDateCheckedNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.DateCheckedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetDateCheckedNull()
                Me(Me.tableCompetitorImportInfo.DateCheckedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsUnit_IDNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportInfo.Unit_IDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetUnit_IDNull()
                Me(Me.tableCompetitorImportInfo.Unit_IDColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class CompetitorPriceRow
            Inherits Global.System.Data.DataRow
            
            Private tableCompetitorPrice As CompetitorPriceDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCompetitorPrice = CType(Me.Table,CompetitorPriceDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Item_Key() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.Item_KeyColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Key' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.Item_KeyColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorStoreID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.CompetitorStoreIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CompetitorStoreID' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.CompetitorStoreIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FiscalYear() As Short
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.FiscalYearColumn),Short)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FiscalYear' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.FiscalYearColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FiscalPeriod() As Byte
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.FiscalPeriodColumn),Byte)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FiscalPeriod' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.FiscalPeriodColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property PeriodWeek() As Byte
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.PeriodWeekColumn),Byte)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'PeriodWeek' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.PeriodWeekColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Description() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.DescriptionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.DescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property PriceMultiple() As Byte
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.PriceMultipleColumn),Byte)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'PriceMultiple' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.PriceMultipleColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Price() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.PriceColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.PriceColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property SaleMultiple() As Byte
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.SaleMultipleColumn),Byte)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SaleMultiple' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.SaleMultipleColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Sale() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.SaleColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Sale' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.SaleColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Size() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.SizeColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Size' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.SizeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Unit_ID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.Unit_IDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Unit_ID' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.Unit_IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property UpdateUserID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorPrice.UpdateUserIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorPrice.UpdateUserIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property UpdateDateTime() As Date
                Get
                    Return CType(Me(Me.tableCompetitorPrice.UpdateDateTimeColumn),Date)
                End Get
                Set
                    Me(Me.tableCompetitorPrice.UpdateDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property UPCCode() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.UPCCodeColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'UPCCode' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.UPCCodeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.CompetitorIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CompetitorID' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.CompetitorIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorLocationID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.CompetitorLocationIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CompetitorLocationID' in table 'CompetitorPrice' is DBNull."& _ 
                                "", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.CompetitorLocationIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property WFMIdentifier() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.WFMIdentifierColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'WFMIdentifier' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.WFMIdentifierColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Competitor() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.CompetitorColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Competitor' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.CompetitorColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Location() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.LocationColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.LocationColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorStore() As String
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorPrice.CompetitorStoreColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CompetitorStore' in table 'CompetitorPrice' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorPrice.CompetitorStoreColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorPriceID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorPrice.CompetitorPriceIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorPrice.CompetitorPriceIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FiscalWeekRowParent() As FiscalWeekRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FiscalWeek_CompetitorPrice")),FiscalWeekRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_FiscalWeek_CompetitorPrice"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property ItemUnitRow() As ItemUnitRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ItemUnit_CompetitorPrice")),ItemUnitRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_ItemUnit_CompetitorPrice"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsItem_KeyNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.Item_KeyColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetItem_KeyNull()
                Me(Me.tableCompetitorPrice.Item_KeyColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCompetitorStoreIDNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.CompetitorStoreIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCompetitorStoreIDNull()
                Me(Me.tableCompetitorPrice.CompetitorStoreIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFiscalYearNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.FiscalYearColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFiscalYearNull()
                Me(Me.tableCompetitorPrice.FiscalYearColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsFiscalPeriodNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.FiscalPeriodColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetFiscalPeriodNull()
                Me(Me.tableCompetitorPrice.FiscalPeriodColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPeriodWeekNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.PeriodWeekColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPeriodWeekNull()
                Me(Me.tableCompetitorPrice.PeriodWeekColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.DescriptionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetDescriptionNull()
                Me(Me.tableCompetitorPrice.DescriptionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPriceMultipleNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.PriceMultipleColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPriceMultipleNull()
                Me(Me.tableCompetitorPrice.PriceMultipleColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPriceNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.PriceColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPriceNull()
                Me(Me.tableCompetitorPrice.PriceColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSaleMultipleNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.SaleMultipleColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSaleMultipleNull()
                Me(Me.tableCompetitorPrice.SaleMultipleColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSaleNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.SaleColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSaleNull()
                Me(Me.tableCompetitorPrice.SaleColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsSizeNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.SizeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetSizeNull()
                Me(Me.tableCompetitorPrice.SizeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsUnit_IDNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.Unit_IDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetUnit_IDNull()
                Me(Me.tableCompetitorPrice.Unit_IDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsUPCCodeNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.UPCCodeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetUPCCodeNull()
                Me(Me.tableCompetitorPrice.UPCCodeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCompetitorIDNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.CompetitorIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCompetitorIDNull()
                Me(Me.tableCompetitorPrice.CompetitorIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCompetitorLocationIDNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.CompetitorLocationIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCompetitorLocationIDNull()
                Me(Me.tableCompetitorPrice.CompetitorLocationIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsWFMIdentifierNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.WFMIdentifierColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetWFMIdentifierNull()
                Me(Me.tableCompetitorPrice.WFMIdentifierColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCompetitorNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.CompetitorColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCompetitorNull()
                Me(Me.tableCompetitorPrice.CompetitorColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsLocationNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.LocationColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetLocationNull()
                Me(Me.tableCompetitorPrice.LocationColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsCompetitorStoreNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorPrice.CompetitorStoreColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetCompetitorStoreNull()
                Me(Me.tableCompetitorPrice.CompetitorStoreColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class CompetitorImportSessionRow
            Inherits Global.System.Data.DataRow
            
            Private tableCompetitorImportSession As CompetitorImportSessionDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCompetitorImportSession = CType(Me.Table,CompetitorImportSessionDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorImportSessionID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorImportSession.CompetitorImportSessionIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorImportSession.CompetitorImportSessionIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property User_ID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorImportSession.User_IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorImportSession.User_IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property StartDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableCompetitorImportSession.StartDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'StartDateTime' in table 'CompetitorImportSession' is DBNull"& _ 
                                ".", e)
                    End Try
                End Get
                Set
                    Me(Me.tableCompetitorImportSession.StartDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsStartDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableCompetitorImportSession.StartDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetStartDateTimeNull()
                Me(Me.tableCompetitorImportSession.StartDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GetCompetitorImportInfoRows() As CompetitorImportInfoRow()
                If (Me.Table.ChildRelations("FK_CompetitorImportSession_CompetitorImportInfo") Is Nothing) Then
                    Return New CompetitorImportInfoRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CompetitorImportSession_CompetitorImportInfo")),CompetitorImportInfoRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class FiscalWeekRow
            Inherits Global.System.Data.DataRow
            
            Private tableFiscalWeek As FiscalWeekDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableFiscalWeek = CType(Me.Table,FiscalWeekDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FiscalYear() As Short
                Get
                    Return CType(Me(Me.tableFiscalWeek.FiscalYearColumn),Short)
                End Get
                Set
                    Me(Me.tableFiscalWeek.FiscalYearColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FiscalPeriod() As Byte
                Get
                    Return CType(Me(Me.tableFiscalWeek.FiscalPeriodColumn),Byte)
                End Get
                Set
                    Me(Me.tableFiscalWeek.FiscalPeriodColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property PeriodWeek() As Byte
                Get
                    Return CType(Me(Me.tableFiscalWeek.PeriodWeekColumn),Byte)
                End Get
                Set
                    Me(Me.tableFiscalWeek.PeriodWeekColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property YearWeek() As Byte
                Get
                    Return CType(Me(Me.tableFiscalWeek.YearWeekColumn),Byte)
                End Get
                Set
                    Me(Me.tableFiscalWeek.YearWeekColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property FiscalWeekDescription() As String
                Get
                    Return CType(Me(Me.tableFiscalWeek.FiscalWeekDescriptionColumn),String)
                End Get
                Set
                    Me(Me.tableFiscalWeek.FiscalWeekDescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property StartDate() As Date
                Get
                    Return CType(Me(Me.tableFiscalWeek.StartDateColumn),Date)
                End Get
                Set
                    Me(Me.tableFiscalWeek.StartDateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property EndDate() As Date
                Get
                    Return CType(Me(Me.tableFiscalWeek.EndDateColumn),Date)
                End Get
                Set
                    Me(Me.tableFiscalWeek.EndDateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GetCompetitorPriceRows() As CompetitorPriceRow()
                If (Me.Table.ChildRelations("FK_FiscalWeek_CompetitorPrice") Is Nothing) Then
                    Return New CompetitorPriceRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FiscalWeek_CompetitorPrice")),CompetitorPriceRow())
                End If
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GetCompetitorImportInfoRows() As CompetitorImportInfoRow()
                If (Me.Table.ChildRelations("FK_FiscalWeek_CompetitorImportInfo") Is Nothing) Then
                    Return New CompetitorImportInfoRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FiscalWeek_CompetitorImportInfo")),CompetitorImportInfoRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class CompetitorRow
            Inherits Global.System.Data.DataRow
            
            Private tableCompetitor As CompetitorDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCompetitor = CType(Me.Table,CompetitorDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitor.CompetitorIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitor.CompetitorIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Name() As String
                Get
                    Return CType(Me(Me.tableCompetitor.NameColumn),String)
                End Get
                Set
                    Me(Me.tableCompetitor.NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GetCompetitorStoreRows() As CompetitorStoreRow()
                If (Me.Table.ChildRelations("FK_CompetitorStore_Competitor") Is Nothing) Then
                    Return New CompetitorStoreRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CompetitorStore_Competitor")),CompetitorStoreRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class CompetitorLocationRow
            Inherits Global.System.Data.DataRow
            
            Private tableCompetitorLocation As CompetitorLocationDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCompetitorLocation = CType(Me.Table,CompetitorLocationDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorLocationID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorLocation.CompetitorLocationIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorLocation.CompetitorLocationIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Name() As String
                Get
                    Return CType(Me(Me.tableCompetitorLocation.NameColumn),String)
                End Get
                Set
                    Me(Me.tableCompetitorLocation.NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GetCompetitorStoreRows() As CompetitorStoreRow()
                If (Me.Table.ChildRelations("FK_CompetitorStore_CompetitorLocation") Is Nothing) Then
                    Return New CompetitorStoreRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CompetitorStore_CompetitorLocation")),CompetitorStoreRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class CompetitorStoreRow
            Inherits Global.System.Data.DataRow
            
            Private tableCompetitorStore As CompetitorStoreDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCompetitorStore = CType(Me.Table,CompetitorStoreDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorStoreID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorStore.CompetitorStoreIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorStore.CompetitorStoreIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorStore.CompetitorIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorStore.CompetitorIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorLocationID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorStore.CompetitorLocationIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorStore.CompetitorLocationIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Name() As String
                Get
                    Return CType(Me(Me.tableCompetitorStore.NameColumn),String)
                End Get
                Set
                    Me(Me.tableCompetitorStore.NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property UpdateUserID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorStore.UpdateUserIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorStore.UpdateUserIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property UpdateDateTime() As Date
                Get
                    Return CType(Me(Me.tableCompetitorStore.UpdateDateTimeColumn),Date)
                End Get
                Set
                    Me(Me.tableCompetitorStore.UpdateDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorRow() As CompetitorRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CompetitorStore_Competitor")),CompetitorRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_CompetitorStore_Competitor"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorLocationRow() As CompetitorLocationRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CompetitorStore_CompetitorLocation")),CompetitorLocationRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_CompetitorStore_CompetitorLocation"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GetStoreCompetitorStoreRows() As StoreCompetitorStoreRow()
                If (Me.Table.ChildRelations("FK_CompetitorStore_StoreCompetitorStore") Is Nothing) Then
                    Return New StoreCompetitorStoreRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CompetitorStore_StoreCompetitorStore")),StoreCompetitorStoreRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class CompetitorStoreIdentifierRow
            Inherits Global.System.Data.DataRow
            
            Private tableCompetitorStoreIdentifier As CompetitorStoreIdentifierDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableCompetitorStoreIdentifier = CType(Me.Table,CompetitorStoreIdentifierDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorStoreIdentifierID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorStoreIdentifier.CompetitorStoreIdentifierIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorStoreIdentifier.CompetitorStoreIdentifierIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorStoreID() As Integer
                Get
                    Return CType(Me(Me.tableCompetitorStoreIdentifier.CompetitorStoreIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableCompetitorStoreIdentifier.CompetitorStoreIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Identifier() As String
                Get
                    Return CType(Me(Me.tableCompetitorStoreIdentifier.IdentifierColumn),String)
                End Get
                Set
                    Me(Me.tableCompetitorStoreIdentifier.IdentifierColumn) = value
                End Set
            End Property
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class StoreCompetitorStoreRow
            Inherits Global.System.Data.DataRow
            
            Private tableStoreCompetitorStore As StoreCompetitorStoreDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableStoreCompetitorStore = CType(Me.Table,StoreCompetitorStoreDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Store_No() As Integer
                Get
                    Return CType(Me(Me.tableStoreCompetitorStore.Store_NoColumn),Integer)
                End Get
                Set
                    Me(Me.tableStoreCompetitorStore.Store_NoColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorStoreID() As Integer
                Get
                    Return CType(Me(Me.tableStoreCompetitorStore.CompetitorStoreIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableStoreCompetitorStore.CompetitorStoreIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Priority() As Byte
                Get
                    Try 
                        Return CType(Me(Me.tableStoreCompetitorStore.PriorityColumn),Byte)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Priority' in table 'StoreCompetitorStore' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableStoreCompetitorStore.PriorityColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property CompetitorStoreRow() As CompetitorStoreRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CompetitorStore_StoreCompetitorStore")),CompetitorStoreRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_CompetitorStore_StoreCompetitorStore"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsPriorityNull() As Boolean
                Return Me.IsNull(Me.tableStoreCompetitorStore.PriorityColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetPriorityNull()
                Me(Me.tableStoreCompetitorStore.PriorityColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ItemUnitRow
            Inherits Global.System.Data.DataRow
            
            Private tableItemUnit As ItemUnitDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableItemUnit = CType(Me.Table,ItemUnitDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Unit_ID() As Integer
                Get
                    Return CType(Me(Me.tableItemUnit.Unit_IDColumn),Integer)
                End Get
                Set
                    Me(Me.tableItemUnit.Unit_IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Property Unit_Name() As String
                Get
                    Try 
                        Return CType(Me(Me.tableItemUnit.Unit_NameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Unit_Name' in table 'ItemUnit' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableItemUnit.Unit_NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function IsUnit_NameNull() As Boolean
                Return Me.IsNull(Me.tableItemUnit.Unit_NameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub SetUnit_NameNull()
                Me(Me.tableItemUnit.Unit_NameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GetCompetitorPriceRows() As CompetitorPriceRow()
                If (Me.Table.ChildRelations("FK_ItemUnit_CompetitorPrice") Is Nothing) Then
                    Return New CompetitorPriceRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ItemUnit_CompetitorPrice")),CompetitorPriceRow())
                End If
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function GetCompetitorImportInfoRows() As CompetitorImportInfoRow()
                If (Me.Table.ChildRelations("FK_CompetitorImportInfo_ItemUnit") Is Nothing) Then
                    Return New CompetitorImportInfoRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CompetitorImportInfo_ItemUnit")),CompetitorImportInfoRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class CompetitorImportInfoRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As CompetitorImportInfoRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As CompetitorImportInfoRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As CompetitorImportInfoRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class CompetitorPriceRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As CompetitorPriceRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As CompetitorPriceRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As CompetitorPriceRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class CompetitorImportSessionRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As CompetitorImportSessionRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As CompetitorImportSessionRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As CompetitorImportSessionRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class FiscalWeekRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As FiscalWeekRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As FiscalWeekRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As FiscalWeekRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class CompetitorRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As CompetitorRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As CompetitorRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As CompetitorRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class CompetitorLocationRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As CompetitorLocationRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As CompetitorLocationRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As CompetitorLocationRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class CompetitorStoreRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As CompetitorStoreRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As CompetitorStoreRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As CompetitorStoreRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class CompetitorStoreIdentifierRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As CompetitorStoreIdentifierRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As CompetitorStoreIdentifierRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As CompetitorStoreIdentifierRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class StoreCompetitorStoreRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As StoreCompetitorStoreRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As StoreCompetitorStoreRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As StoreCompetitorStoreRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Class ItemUnitRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ItemUnitRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Sub New(ByVal row As ItemUnitRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Row() As ItemUnitRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
