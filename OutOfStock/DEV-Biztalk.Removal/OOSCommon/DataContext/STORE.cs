//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace OOSCommon.DataContext
{
    public partial class STORE
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string PS_BU
        {
            get;
            set;
        }
    
        public virtual string STORE_ABBREVIATION
        {
            get;
            set;
        }
    
        public virtual string STORE_NAME
        {
            get;
            set;
        }
    
        public virtual int REGION_ID
        {
            get { return _rEGION_ID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_rEGION_ID != value)
                    {
                        if (REGION != null && REGION.ID != value)
                        {
                            REGION = null;
                        }
                        _rEGION_ID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _rEGION_ID;
    
        public virtual Nullable<int> STATUS_ID
        {
            get { return _sTATUS_ID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_sTATUS_ID != value)
                    {
                        if (STATUS != null && STATUS.ID != value)
                        {
                            STATUS = null;
                        }
                        _sTATUS_ID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _sTATUS_ID;
    
        public virtual Nullable<System.DateTime> LAST_UPDATED_DATE
        {
            get;
            set;
        }
    
        public virtual string LAST_UPDATED_BY
        {
            get;
            set;
        }
    
        public virtual string CREATED_BY
        {
            get;
            set;
        }
    
        public virtual System.DateTime CREATED_DATE
        {
            get;
            set;
        }
    
        public virtual bool Hidden
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<KNOWN_OOS_DETAIL> KNOWN_OOS_DETAIL
        {
            get
            {
                if (_kNOWN_OOS_DETAIL == null)
                {
                    var newCollection = new FixupCollection<KNOWN_OOS_DETAIL>();
                    newCollection.CollectionChanged += FixupKNOWN_OOS_DETAIL;
                    _kNOWN_OOS_DETAIL = newCollection;
                }
                return _kNOWN_OOS_DETAIL;
            }
            set
            {
                if (!ReferenceEquals(_kNOWN_OOS_DETAIL, value))
                {
                    var previousValue = _kNOWN_OOS_DETAIL as FixupCollection<KNOWN_OOS_DETAIL>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupKNOWN_OOS_DETAIL;
                    }
                    _kNOWN_OOS_DETAIL = value;
                    var newValue = value as FixupCollection<KNOWN_OOS_DETAIL>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupKNOWN_OOS_DETAIL;
                    }
                }
            }
        }
        private ICollection<KNOWN_OOS_DETAIL> _kNOWN_OOS_DETAIL;
    
        public virtual REGION REGION
        {
            get { return _rEGION; }
            set
            {
                if (!ReferenceEquals(_rEGION, value))
                {
                    var previousValue = _rEGION;
                    _rEGION = value;
                    FixupREGION(previousValue);
                }
            }
        }
        private REGION _rEGION;
    
        public virtual ICollection<REPORT_HEADER> REPORT_HEADER
        {
            get
            {
                if (_rEPORT_HEADER == null)
                {
                    var newCollection = new FixupCollection<REPORT_HEADER>();
                    newCollection.CollectionChanged += FixupREPORT_HEADER;
                    _rEPORT_HEADER = newCollection;
                }
                return _rEPORT_HEADER;
            }
            set
            {
                if (!ReferenceEquals(_rEPORT_HEADER, value))
                {
                    var previousValue = _rEPORT_HEADER as FixupCollection<REPORT_HEADER>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupREPORT_HEADER;
                    }
                    _rEPORT_HEADER = value;
                    var newValue = value as FixupCollection<REPORT_HEADER>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupREPORT_HEADER;
                    }
                }
            }
        }
        private ICollection<REPORT_HEADER> _rEPORT_HEADER;
    
        public virtual STATUS STATUS
        {
            get { return _sTATUS; }
            set
            {
                if (!ReferenceEquals(_sTATUS, value))
                {
                    var previousValue = _sTATUS;
                    _sTATUS = value;
                    FixupSTATUS(previousValue);
                }
            }
        }
        private STATUS _sTATUS;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupREGION(REGION previousValue)
        {
            if (previousValue != null && previousValue.store.Contains(this))
            {
                previousValue.store.Remove(this);
            }
    
            if (REGION != null)
            {
                if (!REGION.store.Contains(this))
                {
                    REGION.store.Add(this);
                }
                if (REGION_ID != REGION.ID)
                {
                    REGION_ID = REGION.ID;
                }
            }
        }
    
        private void FixupSTATUS(STATUS previousValue)
        {
            if (previousValue != null && previousValue.STORE.Contains(this))
            {
                previousValue.STORE.Remove(this);
            }
    
            if (STATUS != null)
            {
                if (!STATUS.STORE.Contains(this))
                {
                    STATUS.STORE.Add(this);
                }
                if (STATUS_ID != STATUS.ID)
                {
                    STATUS_ID = STATUS.ID;
                }
            }
            else if (!_settingFK)
            {
                STATUS_ID = null;
            }
        }
    
        private void FixupKNOWN_OOS_DETAIL(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (KNOWN_OOS_DETAIL item in e.NewItems)
                {
                    item.STORE = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KNOWN_OOS_DETAIL item in e.OldItems)
                {
                    if (ReferenceEquals(item.STORE, this))
                    {
                        item.STORE = null;
                    }
                }
            }
        }
    
        private void FixupREPORT_HEADER(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (REPORT_HEADER item in e.NewItems)
                {
                    item.STORE = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REPORT_HEADER item in e.OldItems)
                {
                    if (ReferenceEquals(item.STORE, this))
                    {
                        item.STORE = null;
                    }
                }
            }
        }

        #endregion

    }
}
