//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace OOSCommon.DataContext
{
    public partial class REPORT_HEADER
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int STORE_ID
        {
            get { return _sTORE_ID; }
            set
            {
                if (_sTORE_ID != value)
                {
                    if (STORE != null && STORE.ID != value)
                    {
                        STORE = null;
                    }
                    _sTORE_ID = value;
                }
            }
        }
        private int _sTORE_ID;
    
        public virtual System.DateTime CREATED_DATE
        {
            get;
            set;
        }
    
        public virtual string CREATED_BY
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LAST_UPDATED_DATE
        {
            get;
            set;
        }
    
        public virtual string LAST_UPDATED_BY
        {
            get;
            set;
        }
    
        public virtual string PROCESSED_FLAG
        {
            get;
            set;
        }
    
        public virtual Nullable<int> EXCLUDE_FLAG
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> OffsetCorrectedCreateDate
        {
            get;
            set;
        }
    
        public virtual Nullable<short> TimeOffsetFromCentral
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<REPORT_DETAIL> REPORT_DETAIL
        {
            get
            {
                if (_rEPORT_DETAIL == null)
                {
                    var newCollection = new FixupCollection<REPORT_DETAIL>();
                    newCollection.CollectionChanged += FixupREPORT_DETAIL;
                    _rEPORT_DETAIL = newCollection;
                }
                return _rEPORT_DETAIL;
            }
            set
            {
                if (!ReferenceEquals(_rEPORT_DETAIL, value))
                {
                    var previousValue = _rEPORT_DETAIL as FixupCollection<REPORT_DETAIL>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupREPORT_DETAIL;
                    }
                    _rEPORT_DETAIL = value;
                    var newValue = value as FixupCollection<REPORT_DETAIL>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupREPORT_DETAIL;
                    }
                }
            }
        }
        private ICollection<REPORT_DETAIL> _rEPORT_DETAIL;
    
        public virtual STORE STORE
        {
            get { return _sTORE; }
            set
            {
                if (!ReferenceEquals(_sTORE, value))
                {
                    var previousValue = _sTORE;
                    _sTORE = value;
                    FixupSTORE(previousValue);
                }
            }
        }
        private STORE _sTORE;

        #endregion

        #region Association Fixup
    
        private void FixupSTORE(STORE previousValue)
        {
            if (previousValue != null && previousValue.REPORT_HEADER.Contains(this))
            {
                previousValue.REPORT_HEADER.Remove(this);
            }
    
            if (STORE != null)
            {
                if (!STORE.REPORT_HEADER.Contains(this))
                {
                    STORE.REPORT_HEADER.Add(this);
                }
                if (STORE_ID != STORE.ID)
                {
                    STORE_ID = STORE.ID;
                }
            }
        }
    
        private void FixupREPORT_DETAIL(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (REPORT_DETAIL item in e.NewItems)
                {
                    item.REPORT_HEADER = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REPORT_DETAIL item in e.OldItems)
                {
                    if (ReferenceEquals(item.REPORT_HEADER, this))
                    {
                        item.REPORT_HEADER = null;
                    }
                }
            }
        }

        #endregion

    }
}
