//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5466
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.5466.
// 
namespace WFM.Mobile.OOS.OOSService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IScanOutOfStock", Namespace="http://tempuri.org/")]
    public partial class ScanOutOfStock : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public ScanOutOfStock() {
            this.Url = "http://oosappprd/WebService/ScanOutOfStock.svc";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/Validate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] Validate([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] upcs) {
            object[] results = this.Invoke("Validate", new object[] {
                        upcs});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidate(string[] upcs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Validate", new object[] {
                        upcs}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndValidate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/CreateEventsFor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CreateEventsFor([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string storeName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] upcs) {
            object[] results = this.Invoke("CreateEventsFor", new object[] {
                        storeName,
                        upcs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateEventsFor(string storeName, string[] upcs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateEventsFor", new object[] {
                        storeName,
                        upcs}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCreateEventsFor(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/ScanProducts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ScanProducts(System.DateTime scanDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool scanDateSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string regionName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string storeName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] upcs) {
            this.Invoke("ScanProducts", new object[] {
                        scanDate,
                        scanDateSpecified,
                        regionName,
                        storeName,
                        upcs});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginScanProducts(System.DateTime scanDate, bool scanDateSpecified, string regionName, string storeName, string[] upcs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ScanProducts", new object[] {
                        scanDate,
                        scanDateSpecified,
                        regionName,
                        storeName,
                        upcs}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndScanProducts(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/ValidateFor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ValidateFor([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string upc) {
            object[] results = this.Invoke("ValidateFor", new object[] {
                        upc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateFor(string upc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateFor", new object[] {
                        upc}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndValidateFor(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/CreateEventFor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CreateEventFor([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string storeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string upc) {
            object[] results = this.Invoke("CreateEventFor", new object[] {
                        storeName,
                        upc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateEventFor(string storeName, string upc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateEventFor", new object[] {
                        storeName,
                        upc}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCreateEventFor(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/Ping", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Ping([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string echo) {
            object[] results = this.Invoke("Ping", new object[] {
                        echo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPing(string echo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ping", new object[] {
                        echo}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPing(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/RegionNames", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] RegionNames() {
            object[] results = this.Invoke("RegionNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegionNames(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegionNames", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndRegionNames(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/StoreNamesFor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] StoreNamesFor([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string regionName) {
            object[] results = this.Invoke("StoreNamesFor", new object[] {
                        regionName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStoreNamesFor(string regionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StoreNamesFor", new object[] {
                        regionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndStoreNamesFor(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/RegionAbbreviations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] RegionAbbreviations() {
            object[] results = this.Invoke("RegionAbbreviations", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegionAbbreviations(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegionAbbreviations", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndRegionAbbreviations(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/StoreAbbreviationsFor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] StoreAbbreviationsFor([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string regionAbbrev) {
            object[] results = this.Invoke("StoreAbbreviationsFor", new object[] {
                        regionAbbrev});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStoreAbbreviationsFor(string regionAbbrev, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StoreAbbreviationsFor", new object[] {
                        regionAbbrev}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndStoreAbbreviationsFor(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IScanOutOfStock/ScanProductsByStoreAbbreviation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ScanProductsByStoreAbbreviation(System.DateTime scanDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool scanDateSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string regionAbbrev, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string storeAbbrev, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] upcs) {
            this.Invoke("ScanProductsByStoreAbbreviation", new object[] {
                        scanDate,
                        scanDateSpecified,
                        regionAbbrev,
                        storeAbbrev,
                        upcs});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginScanProductsByStoreAbbreviation(System.DateTime scanDate, bool scanDateSpecified, string regionAbbrev, string storeAbbrev, string[] upcs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ScanProductsByStoreAbbreviation", new object[] {
                        scanDate,
                        scanDateSpecified,
                        regionAbbrev,
                        storeAbbrev,
                        upcs}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndScanProductsByStoreAbbreviation(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
    }
}
