//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wfm.OutOfStock.Api.Legacy
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Wfm.OutOfStock.Api.Legacy.IOosBackend")]
    public interface IOosBackend
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOosBackend/ScanProductsByStoreAbbreviation", ReplyAction="http://tempuri.org/IOosBackend/ScanProductsByStoreAbbreviationResponse")]
        System.Threading.Tasks.Task ScanProductsByStoreAbbreviationAsync(System.DateTime scanDate, string regionAbbrev, string storeAbbrev, string[] upcs, string userName, string userEmail, string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOosBackend/Configure", ReplyAction="http://tempuri.org/IOosBackend/ConfigureResponse")]
        System.Threading.Tasks.Task<string> ConfigureAsync(string region, string store, string username, string useremail, string sessionId, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOosBackend/RegionNames", ReplyAction="http://tempuri.org/IOosBackend/RegionNamesResponse")]
        System.Threading.Tasks.Task<string[]> RegionNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOosBackend/StoreNamesFor", ReplyAction="http://tempuri.org/IOosBackend/StoreNamesForResponse")]
        System.Threading.Tasks.Task<string[]> StoreNamesForAsync(string regionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOosBackend/RegionAbbreviations", ReplyAction="http://tempuri.org/IOosBackend/RegionAbbreviationsResponse")]
        System.Threading.Tasks.Task<string[]> RegionAbbreviationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOosBackend/StoreAbbreviationsFor", ReplyAction="http://tempuri.org/IOosBackend/StoreAbbreviationsForResponse")]
        System.Threading.Tasks.Task<string[]> StoreAbbreviationsForAsync(string regionAbbrev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOosBackend/ValidateRegionStore", ReplyAction="http://tempuri.org/IOosBackend/ValidateRegionStoreResponse")]
        System.Threading.Tasks.Task<string> ValidateRegionStoreAsync(string region, string store, string sessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IOosBackendChannel : Wfm.OutOfStock.Api.Legacy.IOosBackend, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class OosBackendClient : System.ServiceModel.ClientBase<Wfm.OutOfStock.Api.Legacy.IOosBackend>, Wfm.OutOfStock.Api.Legacy.IOosBackend
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public OosBackendClient() : 
                base(OosBackendClient.GetDefaultBinding(), OosBackendClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IOosBackend.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OosBackendClient(EndpointConfiguration endpointConfiguration) : 
                base(OosBackendClient.GetBindingForEndpoint(endpointConfiguration), OosBackendClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OosBackendClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(OosBackendClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OosBackendClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(OosBackendClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OosBackendClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task ScanProductsByStoreAbbreviationAsync(System.DateTime scanDate, string regionAbbrev, string storeAbbrev, string[] upcs, string userName, string userEmail, string sessionId)
        {
            return base.Channel.ScanProductsByStoreAbbreviationAsync(scanDate, regionAbbrev, storeAbbrev, upcs, userName, userEmail, sessionId);
        }
        
        public System.Threading.Tasks.Task<string> ConfigureAsync(string region, string store, string username, string useremail, string sessionId, string ipAddress)
        {
            return base.Channel.ConfigureAsync(region, store, username, useremail, sessionId, ipAddress);
        }
        
        public System.Threading.Tasks.Task<string[]> RegionNamesAsync()
        {
            return base.Channel.RegionNamesAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> StoreNamesForAsync(string regionName)
        {
            return base.Channel.StoreNamesForAsync(regionName);
        }
        
        public System.Threading.Tasks.Task<string[]> RegionAbbreviationsAsync()
        {
            return base.Channel.RegionAbbreviationsAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> StoreAbbreviationsForAsync(string regionAbbrev)
        {
            return base.Channel.StoreAbbreviationsForAsync(regionAbbrev);
        }
        
        public System.Threading.Tasks.Task<string> ValidateRegionStoreAsync(string region, string store, string sessionId)
        {
            return base.Channel.ValidateRegionStoreAsync(region, store, sessionId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IOosBackend))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IOosBackend))
            {
                return new System.ServiceModel.EndpointAddress("http://oosapptest/WebService/OOSBackend.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return OosBackendClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IOosBackend);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return OosBackendClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IOosBackend);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IOosBackend,
        }
    }
}
