//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace OOSCommon.DataContext
{
    public partial class REGION
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string REGION_ABBR
        {
            get;
            set;
        }
    
        public virtual string REGION_NAME
        {
            get;
            set;
        }
    
        public virtual string IS_VISIBLE
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<KNOWN_OOS_MAP> KNOWN_OOS_MAP
        {
            get
            {
                if (_kNOWN_OOS_MAP == null)
                {
                    var newCollection = new FixupCollection<KNOWN_OOS_MAP>();
                    newCollection.CollectionChanged += FixupKNOWN_OOS_MAP;
                    _kNOWN_OOS_MAP = newCollection;
                }
                return _kNOWN_OOS_MAP;
            }
            set
            {
                if (!ReferenceEquals(_kNOWN_OOS_MAP, value))
                {
                    var previousValue = _kNOWN_OOS_MAP as FixupCollection<KNOWN_OOS_MAP>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupKNOWN_OOS_MAP;
                    }
                    _kNOWN_OOS_MAP = value;
                    var newValue = value as FixupCollection<KNOWN_OOS_MAP>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupKNOWN_OOS_MAP;
                    }
                }
            }
        }
        private ICollection<KNOWN_OOS_MAP> _kNOWN_OOS_MAP;
    
        public virtual ICollection<REGION_MOVEMENT_QUERY> REGION_MOVEMENT_QUERY
        {
            get
            {
                if (_rEGION_MOVEMENT_QUERY == null)
                {
                    var newCollection = new FixupCollection<REGION_MOVEMENT_QUERY>();
                    newCollection.CollectionChanged += FixupREGION_MOVEMENT_QUERY;
                    _rEGION_MOVEMENT_QUERY = newCollection;
                }
                return _rEGION_MOVEMENT_QUERY;
            }
            set
            {
                if (!ReferenceEquals(_rEGION_MOVEMENT_QUERY, value))
                {
                    var previousValue = _rEGION_MOVEMENT_QUERY as FixupCollection<REGION_MOVEMENT_QUERY>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupREGION_MOVEMENT_QUERY;
                    }
                    _rEGION_MOVEMENT_QUERY = value;
                    var newValue = value as FixupCollection<REGION_MOVEMENT_QUERY>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupREGION_MOVEMENT_QUERY;
                    }
                }
            }
        }
        private ICollection<REGION_MOVEMENT_QUERY> _rEGION_MOVEMENT_QUERY;
    
        public virtual ICollection<REGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP> REGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP
        {
            get
            {
                if (_rEGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP == null)
                {
                    var newCollection = new FixupCollection<REGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP>();
                    newCollection.CollectionChanged += FixupREGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP;
                    _rEGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP = newCollection;
                }
                return _rEGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP;
            }
            set
            {
                if (!ReferenceEquals(_rEGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP, value))
                {
                    var previousValue = _rEGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP as FixupCollection<REGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupREGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP;
                    }
                    _rEGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP = value;
                    var newValue = value as FixupCollection<REGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupREGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP;
                    }
                }
            }
        }
        private ICollection<REGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP> _rEGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP;
    
        public virtual ICollection<STORE> STORE
        {
            get
            {
                if (_sTORE == null)
                {
                    var newCollection = new FixupCollection<STORE>();
                    newCollection.CollectionChanged += FixupSTORE;
                    _sTORE = newCollection;
                }
                return _sTORE;
            }
            set
            {
                if (!ReferenceEquals(_sTORE, value))
                {
                    var previousValue = _sTORE as FixupCollection<STORE>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSTORE;
                    }
                    _sTORE = value;
                    var newValue = value as FixupCollection<STORE>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSTORE;
                    }
                }
            }
        }
        private ICollection<STORE> _sTORE;

        #endregion
        #region Association Fixup
    
        private void FixupKNOWN_OOS_MAP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (KNOWN_OOS_MAP item in e.NewItems)
                {
                    item.REGION = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KNOWN_OOS_MAP item in e.OldItems)
                {
                    if (ReferenceEquals(item.REGION, this))
                    {
                        item.REGION = null;
                    }
                }
            }
        }
    
        private void FixupREGION_MOVEMENT_QUERY(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (REGION_MOVEMENT_QUERY item in e.NewItems)
                {
                    item.REGION = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REGION_MOVEMENT_QUERY item in e.OldItems)
                {
                    if (ReferenceEquals(item.REGION, this))
                    {
                        item.REGION = null;
                    }
                }
            }
        }
    
        private void FixupREGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (REGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP item in e.NewItems)
                {
                    item.REGION = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (REGION_REPORT_DETAIL_ATTRIBUTE_TYPE_MAP item in e.OldItems)
                {
                    if (ReferenceEquals(item.REGION, this))
                    {
                        item.REGION = null;
                    }
                }
            }
        }
    
        private void FixupSTORE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (STORE item in e.NewItems)
                {
                    item.REGION = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (STORE item in e.OldItems)
                {
                    if (ReferenceEquals(item.REGION, this))
                    {
                        item.REGION = null;
                    }
                }
            }
        }

        #endregion
    }
}
